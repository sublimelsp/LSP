{

  // Show permanent language server status in the status bar.
  "show_view_status": true,

  // Open and close the diagnostics panel automatically,
  // depending on available diagnostics.
  // Valid values are "never", "always" and "saved"
  "auto_show_diagnostics_panel": "saved",

  // Run the server's formatProvider (if supported) on a document before saving.
  // This option is also supported in syntax-specific settings and/or in the
  // "settings" section of project files.
  "lsp_format_on_save": false,

  // A dictionary of code action identifiers that should be triggered on save.
  //
  // Code action identifiers are not officially standardized so refer to specific
  // server's documentation on what is supported but `source.fixAll` is commonly
  // used to apply fix-on-save code actions.
  //
  // This option is also supported in syntax-specific settings and/or in the
  // "settings" section of project files. Settings from all those places will be
  // merged and more specific (syntax and project) settings will override less
  // specific (from LSP or Sublime settings).
  //
  // Only "source.*" actions are supported.
  "lsp_code_actions_on_save": {
    // "source.fixAll": true
  },

  // The amount of time the code actions on save are allowed to run for.
  "code_action_on_save_timeout_ms": 2000,

  // Open the diagnostics panel automatically
  // when diagnostics level is equal to or less than:
  // error: 1
  // warning: 2
  // info: 3
  // hint: 4
  "auto_show_diagnostics_panel_level": 2,

  // Show errors and warnings count in the status bar
  "show_diagnostics_count_in_view_status": false,

  // Show the diagnostics description of the code
  // under the cursor in status bar if available.
  "show_diagnostics_in_view_status": true,

  // Show the diagnostics with level less than or equal to
  // the given value.
  // error: 1
  // warning: 2
  // info: 3
  // hint: 4
  "show_diagnostics_severity_level": 4,

  // Highlighting style of code diagnostics.
  // Valid values are "underline" or "box"
  "diagnostics_highlight_style": "underline",

  // Highlighting style of "highlights": accentuating nearby text entities that
  // are related to the one under your cursor.
  // Valid values are "fill", "box", "underline", "stippled", "squiggly" or "".
  // When set to the empty string (""), no document highlighting is requested.
  "document_highlight_style": "underline",

  "document_highlight_scopes": {
    "unknown": "text",
    "text": "text",
    "read": "markup.inserted",
    "write": "markup.changed"
  },

  // Gutter marker for code diagnostics.
  // Valid values are "dot", "circle", "bookmark", "sign" or ""
  "diagnostics_gutter_marker": "dot",

  // Show a bulb in the gutter when code actions are available
  "show_code_actions_bulb": false,

  // Show symbol action links in hover popup if available
  "show_symbol_action_links": false,

  // Disable Sublime Text's explicit and word completion.
  "only_show_lsp_completions": false,

  // Show symbol references in Sublime's quick panel instead of the bottom panel.
  "show_references_in_quick_panel": false,

  // Disable language client capabilities. Supported values:
  // "hover", "completion", "colorProvider", "documentHighlight", "signatureHelp"
  "disabled_capabilities": [],

  // Show verbose debug messages in the sublime console.
  "log_debug": false,

  // Show messages from language servers in the Language Servers output panel.
  // This output panel can be toggled from the command palette with the
  // command "LSP: Toggle Panel: Language Servers".
  "log_server": true,

  // Show language server stderr output in the Language Servers output panel.
  // This output panel can be toggled from the command palette with the
  // command "LSP: Toggle Panel: Language Servers".
  "log_stderr": false,

  // Show full JSON-RPC requests/responses/notifications in the Language Servers
  // output panel. Note that if the payload is very large, SublimeText will not
  // highlight the log line.
  // This output panel can be toggled from the command palette with the
  // command "LSP: Toggle Panel: Language Servers".
  "log_payloads": false,

  // User clients configuration can be used to
  // - override single settings of "default_clients"
  // - create add new user specified clients
  //
  // "clients":
  // {
  //   // Each new client must have the following structure.
  //   "client_name":
  //   {
  //     # Must-have settings (for new clients):
  //
  //     // The command line required to run the server.
  //     "command": ["pyls"],
  //
  //     // Use: "Show Scope Name" from Sublime's Developer menu
  //     // This is _the_ connection between your files and language servers. It's a selector that is matched
  //     // against the current view's base scope. If the selector matches with the base scope of the
  //     // the file, the associated language server is started.
  //     // If the selector happens to be of the form "source.{languageId}" (which it is in many cases), then you can
  //     // omit this "selector" key altogether, and LSP will assume the selector is "source.{languageId}".
  //     // For more information, see https://www.sublimetext.com/docs/3/selectors.html
  //     "document_selector": "source.python",
  //
  //     // See: https://microsoft.github.io/language-server-protocol/specification#textDocumentItem
  //     //
  //     // This key serves two purposes:
  //     // 1. It is sent to the language server so that it knows with what kind of file it is dealing with.
  //     // 2. When "selector" is not provided (see above), this is _the_ connection between your files and language
  //     //    servers.
  //     //
  //     // In this particular example, we don't have to supply a "selector" key, because the selector for a Python file
  //     // is "source.python" (see above).
  //     "languageId": "python",
  //
  //     // When you want to connect to the language server via TCP (on localhost), specify the port here.
  //     // If you put a value of 0 here, then LSP will select a free port number on localhost. In that case, you can
  //     // use the string templates $port or ${port} in the "command".
  //     // The syntax "{port}" is also allowed, but deprecated in favor of $port and ${port}.
  //     "tcp_port": 1234,
  //
  //     # Optional settings (key-value pairs):
  //
  //     // Sent to server once using workspace/didChangeConfiguration notification
  //     "settings": { },
  //
  //     // Sent once to server in initialize request
  //     "initializationOptions": { },
  //
  //     // Extra variables to override/add to language server's environment.
  //     "env": { },
  //   }
  // }
  "clients": {

  },

  // Default clients configuration
  // DO NOT MODIFY THIS SETTING!
  // Use "clients" to override settings instead!
  "default_clients":
  {
    "pyls":
    {
      "command": ["pyls"],
      "languageId": "python" // will match source.python
      // "settings": {
      //   "pyls": {
      //       "configurationSources": ["flake8"],
      //       "plugins": {
      //           "pyflakes": {
      //               "enabled": false
      //           }
      //       }
      //   }
      // }
    },
    "rls":
    {
      "command": ["rustup", "run", "nightly", "rls"],
      "languageId": "rust" // will match source.rust
    },
     "rust-analyzer":
    {
      "command": ["rust-analyzer"],
      "languageId": "rust" // will match source.rust
    },
    "bashls":
    {
        "command":
        [
            "bash-language-server", // add .cmd on windows
            "start"
        ],
        "languageId": "bash",
        "document_selector": "source.shell.bash",
    },
    "clangd":
    {
      "command": ["clangd"],
      "languages": [{
          "languageId": "c" // will match source.c
        },{
          "document_selector": "source.c++",
          "languageId": "cpp"
        },{
          "document_selector": "source.objc",
          "languageId": "objective-c"
        },{
          "document_selector": "source.objc++",
          "languageId": "objective-cpp"
        },
      ]
    },
    "cquery":
    {
      "command":
      [
        "cquery",
        "--log-all-to-stderr"
      ],
      "initializationOptions":
      {
        "cacheDirectory": "/tmp/cquery"
      },
      "languages":
      [
        {
          "languageId": "c" // will match source.c
        },
        {
          "languageId": "cpp",
          "document_selector": "source.c++"
        },
        {
          "languageId": "objective-c",
          "document_selector": "source.objc"
        },
        {
          "languageId": "objective-cpp",
          "document_selector": "source.objc++"
        }
      ]
    },
    "dart": {
      "command": [
        // Specify a dart command like the below in your LSP User settings.
        // "dart", "/usr/local/opt/dart/libexec/bin/snapshots/analysis_server.dart.snapshot", "--lsp"
      ],
      "languageId": "dart" // will match source.dart
    },
    "elixir-ls": {
      "command": [
        // Specify path to language_server.sh from https://github.com/elixir-lsp/elixir-ls here
        // "/home/someUser/somePlace/elixir-ls/release/language_server.sh"
      ],
      "languageId": "elixir", // will match source.elixir
      "settings": {
      }
    },
    "erlang-ls": {
      "command"   : [ "erlang_ls", "--transport", "stdio" ],
      "languageId": "erlang" // will match source.erlang
    },
    "flow":
    {
      "command": ["flow", "lsp"],
      "document_selector": "source.js",
      "languageId": "javascript"
    },
    "haskell-ide-engine":
    {
      "command":
      [
        "hie",
        "--lsp"
      ],
      "languageId": "haskell" // will match source.haskell
    },
    "intelephense-ls":
    {
        "command": ["intelephense", "--stdio"],
        "document_selector": "source.php | embedding.php",
        "languageId": "php",
        "initializationOptions": {
        //   "clearCache": false,
          "storagePath": null,
        //   "globalStoragePath": "/tmp/intelephense",
        //   "licenceKey": "",
        }
    },
    "reason":
    {
      "command": ["ocaml-language-server", "--stdio"],
      "languageId": "reason" // will match source.reason
    },
    "phpls":
    {
        "command": ["php", "~/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php"],
        "document_selector": "source.php | embedding.php",
        "languageId": "php"
    },
    //"eslint": { },
    // Install the LSP-eslint package, which comes with its own settings file
    "lsp-tsserver":
    {
      "command": ["lsp-tsserver"],
      "languages": [{
        "document_selector": "source.js",
        "languageId": "javascript"
      }, {
        "document_selector": "source.jsx",
        "languageId": "javascriptreact"
      }, {
        "document_selector": "source.ts",
        "languageId": "typescript"
      }, {
        "document_selector": "source.tsx",
        "languageId": "typescriptreact"
      }
      ]
    },
    "javascript-typescript-langserver":
    {
      "command": ["javascript-typescript-stdio"],
      "languages": [{
        "document_selector": "source.js",
        "languageId": "javascript"
      }, {
        "document_selector": "source.jsx",
        "languageId": "javascriptreact"
      }, {
        "document_selector": "source.ts",
        "languageId": "typescript"
      }, {
        "document_selector": "source.tsx",
        "languageId": "typescriptreact"
      }
      ]
    },
    "typescript-language-server":
    {
      "command": ["typescript-language-server", "--stdio"],
      "languages": [{
        "document_selector": "source.js",
        "languageId": "javascript"
      }, {
        "document_selector": "source.jsx",
        "languageId": "javascriptreact"
      }, {
        "document_selector": "source.ts",
        "languageId": "typescript"
      }, {
        "document_selector": "source.tsx",
        "languageId": "typescriptreact"
      }
      ]
    },
    "ocaml":
    {
      "command": ["ocaml-language-server", "--stdio"],
      "languageId": "ocaml" // will match source.ocaml
    },
    "golsp":
    {
      "command": ["go-langserver"],
      "languageId": "go" // will match source.go
    },
    "gopls":
    {
      "command": ["gopls"],
      "languageId": "go" // will match source.go
    },
    "jdtls":
    {
      "command": ["java", "-jar", "PATH_TO_JDT_SERVER/plugins/org.eclipse.equinox.launcher_1.4.0.v20161219-1356.jar", "-configuration", "PATH_TO_CONFIG_DIR"],
      "languageId": "java" // will match source.java
    },
    "polymer-ide":
    {
      "command": ["polymer-editor-service"],
      "languages": [{
          "document_selector": "text.html.basic | source.html",
          "languageId": "html"
        },{
          "document_selector": "source.js",
          "languageId": "javascript"
        },{
          "languageId": "css" // will match source.css
        },{
          "languageId": "json" // will match source.json
        }
      ],
      "settings": {
        "polymer-ide": {
          "analyzeWholePackage": false,
          "fixOnSave": false
        }
      }
    },
    "ruby": {
      "command":
      [
        "solargraph",
        "socket"
      ],
      "languageId": "ruby",
      "document_selector": "source.ruby | text.html.ruby",
      "tcp_port": 7658,
      // Enable RuboCop linting
      // "initializationOptions": {
      //   "diagnostics": true
      // },
    },
    "sorbet": {
      "command": ["srb", "tc", "--typed", "true", "--enable-all-experimental-lsp-features", "--lsp", "--disable-watchman"],
      "languageId": "ruby",
      "document_selector": "source.ruby | text.html.ruby"
    },
    "vscode-css":
    {
      "command":
      [
        "css-languageserver", "--stdio"
      ],
      "languageId": "css" // will match source.css
    },
    "rlang":
    {
      "command":
      [
        "R", "--slave", "-e", "languageserver::run()"
      ],
      "languageId": "r" // will match source.r
    },
    "sourcekit-lsp": {
      "command": ["xcrun", "sourcekit-lsp"],
      "languageId": "swift" // will match source.swift
    },
  }
}
