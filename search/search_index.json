{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>To get up and running quickly:</p> <ol> <li>Find a server for the language of your choice in the list of language servers and follow its setup instructions.</li> <li>Open a document in your chosen language - if the server starts successfully then its name will be shown on the left in the status bar.</li> </ol> <p>If you are having issues with starting the server, check the Troubleshooting section.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>\"LSP\" is an acronym for Language Server Protocol. This is a specification for the communication protocol for use between text editors or IDEs and language servers - tools which provide language-specific features like autocomplete, go to definition, or documentation on hover. As the so called LSP client this package acts as an interface between Sublime Text and your language server, which means that to obtain these features you need to install a server for your language first. Language servers can be provided as standalone executables or require a runtime environment like Node.js or Python. For various languages you can find a community maintained helper package with an <code>LSP-</code> name prefix on Package Control. These packages allow to install and update a particular language server automatically, to setup a default configuration with server specific settings, and they may also provide additional features for servers which use a custom extension of the language server protocol. Alternatively, a language server can be installed manually and the necessary configuration can be added directly into the <code>LSP.sublime-settings</code> file; see the Client Configuration page for details.</p> <p>Many new concepts not native to Sublime Text are in use. For an overview of these concepts, please see the Features page.</p>"},{"location":"#projects-workspace-folders","title":"Projects &amp; Workspace Folders","text":"<p>This LSP client supports to run multiple active servers at the same time for a single file type. For example in a Python project you could use LSP-pyright for general features (autocomplete, go to definition, etc.) and simultaneously LSP-ruff for additional linter warnings. In case you want to run multiple servers with a similar set of features at the same time, it is possible to prioritize one of the servers by disabling some of the features for the other server(s) using the <code>\"disabled_capabilities\"</code> setting in the Client Configuration.</p> <p>An instance of a language server is always bound to a single window in Sublime Text. Note that this means if you move a file tab handled by a language server out of a window, a new instance of that server will be started, or if it was moved into another window where the corresponding server was already running, then it will be managed by that other server instance. In other words you can have multiple projects open at the same time in different windows and each of them gets managed by its own language server instance.</p> <p>\"Workspace\" and \"workspace folders\" are terms from VS Code and they are also used in the LSP specification. Basically a workspace corresponds to a window in Sublime Text and the workspace folders are just the folders which are opened in the sidebar. The window does not necessarily need to be associated with a Sublime project, but sometimes this can be useful for project-specific configurations, see Per-project overrides. There can be multiple workspace folders, or even none if you just open individual files in the active window. When a language server starts, it is notified about the workspace folders and many servers use them to look for configuration files, for instance <code>Cargo.toml</code> in Rust or <code>pyproject.toml</code> in a Python project. So for project-based programming languages you typically want to have the root folder of your project opened as a folder in the sidebar.</p> <p>If a file from outside the workspace folders is opened in the same window (for example manually, or when using \"Goto Definition\"), most LSP features should still work in that file. However, note that diagnostic messages are filtered out for such files unless explicitly configured differently in the client configuration for that server.</p>"},{"location":"#server-settings-initialization-options","title":"Server Settings &amp; Initialization Options","text":"<p>A language server may expose settings that you can use to customize its behavior. For instance certain linter settings or formatting options. If you use an LSP-* helper package for your language server, its settings can be customized in the corresponding <code>.sublime-settings</code> file that you can open from the command palette or from the main menu under <code>Preferences &gt; Package Settings &gt; LSP &gt; Servers</code>.</p> <p>Initialization Options are like server settings, except they are static in the sense that they cannot be changed once the language server subprocess has started.</p>"},{"location":"#subprocesses","title":"Subprocesses","text":"<p>A language server usually runs as a long-lived subprocess of Sublime Text. Once you start Sublime Text and open a view, the syntax of that view is matched against any possible client configurations registered. If a Client Configuration matches, a subprocess is started that will then serve you language smartness.</p>"},{"location":"client_configuration/","title":"Client Configuration","text":""},{"location":"client_configuration/#custom-client-configuration","title":"Custom client configuration","text":"<p>Note</p> <p>The external LSP-* helper packages already come with their setting file and a client configuration and you don't need to add anything to the global LSP settings. This section is only relevant if you want to add a new client configuration for a server that doesn't have a corresponding helper package.</p> <p>After you have installed a language server, the LSP settings need to be configured to enable communication between LSP and that server for suitable filetypes. LSP ships with configurations for a few language servers, but these need to be enabled before they will start. To globally enable a server, open the Command Palette and choose \"LSP: Enable Language Server Globally\". This will add <code>\"enabled\": true</code> to the corresponding language server setting under the <code>\"clients\"</code> key in your user-settings file for LSP. Your user-settings file is stored at <code>Packages/User/LSP.sublime-settings</code> and can be opened via \"Preferences &gt; Package Settings &gt; LSP &gt; Settings\" from the menu or with the <code>Preferences: LSP Settings</code> command from the Command Palette. If your language server is missing or not configured correctly, you need to add/override further settings which are explained below.</p> <p>Below is an example of the <code>LSP.sublime-settings</code> file with configurations for the Phpactor server.</p> Packages/User/LSP.sublime-settings<pre><code>{\n  // General settings\n  \"show_diagnostics_panel_on_save\": 0,\n\n  // Language server configurations\n  \"clients\": {\n    \"phpactor\": {\n      // enable this configuration\n      \"enabled\": true,\n      // the startup command -- what you would type in a terminal\n      \"command\": [\"PATH/TO/phpactor\", \"language-server\"],\n      // the selector that selects which type of buffers this language server attaches to\n      \"selector\": \"source.php\"\n    }\n  }\n}\n</code></pre> Setting Description enabled enables a language server (default is disabled) command must be on PATH or specify a full path, add arguments (can be empty if starting manually, then TCP transport must be configured) env dict of environment variables to be injected into the language server's process (eg. PYTHONPATH) settings per-project settings (equivalent to VS Code's Workspace Settings) initializationOptions options to send to the server at startup (rarely used) selector This is the connection between your files and language servers. It's a selector that is matched against the current view's base scope. If the selector matches with the base scope of the the file, the associated language server is started. For more information, see https://www.sublimetext.com/docs/3/selectors.html priority_selector Used to prioritize a certain language server when choosing which one to query on views with multiple servers active. Certain LSP actions have to pick which server to query and this setting can be used to decide which one to pick based on the current scopes at the cursor location. For example when having both HTML and PHP servers running on a PHP file, this can be used to give priority to the HTML one in HTML blocks and to PHP one otherwise. That would be done by setting \"priority_selector\" to <code>text.html</code> for HTML server and <code>source.php</code> to PHP server. Note: when the \"priority_selector\" is missing, it will be the same as the \"document_selector\". diagnostics_mode Set to <code>\"workspace\"</code> (default is <code>\"open_files\"</code>) to ignore diagnostics for files that are not within the project (window) folders. If project has no folders then this option has no effect and diagnostics are shown for all files. If the server supports pull diagnostics (<code>diagnosticProvider</code>), this setting also controls whether diagnostics are requested only for open files (<code>\"open_files\"</code>), or for all files in the project folders (<code>\"workspace\"</code>). tcp_port see instructions below experimental_capabilities Turn on experimental capabilities of a language server. This is a dictionary and differs per language server disabled_capabilities Disables specific capabilities of a language server. This is a dictionary with key being a capability key and being <code>true</code>. Refer to the <code>ServerCapabilities</code> structure in LSP capabilities to find capabilities that you might want to disable. Note that the value should be <code>true</code> rather than <code>false</code> for capabilites that you want to disable. For example: <code>\"signatureHelpProvider\": true</code> <p>You can figure out the scope of the current view with <code>Tools &gt; Developer &gt; Show Scope</code>.</p>"},{"location":"client_configuration/#subprocesses","title":"Subprocesses","text":"<p>A subprocess is always started. There is no support for connecting to a remote language server.</p>"},{"location":"client_configuration/#transports","title":"Transports","text":"<p>Communication with a language server subprocess can be achieved in different ways. See the table below for what's possible.</p>"},{"location":"client_configuration/#standard-inputoutput-stdio","title":"Standard input/output (STDIO)","text":"<p>The vast majority of language servers can communicate over stdio. To use stdio, leave out <code>tcp_port</code> and use only <code>command</code> in the client configuration.</p>"},{"location":"client_configuration/#tcp-localhost-subprocess-acts-as-a-tcp-server","title":"TCP - localhost - subprocess acts as a TCP server","text":"<p>Some language servers can also act as a TCP server accepting incoming TCP connections. So: the language server subprocess is started by this package, and the subprocess will then open a TCP listener port. The editor can then connect as a client and initiate the communication. To use this mode, set <code>tcp_port</code> to a positive number designating the port to connect to on <code>localhost</code>.</p> <p>Optionally in this case, you can omit the <code>command</code> setting if you don't want Sublime LSP to manage the language server process and you'll take care of it yourself. </p>"},{"location":"client_configuration/#tcp-localhost-editor-acts-as-a-tcp-server","title":"TCP - localhost - editor acts as a TCP server","text":"<p>Some LSP servers instead expect the LSP client to act as a TCP server. The LSP server will then connect as a TCP client, after which the LSP client is expected to initiate the communication. To use this mode, set <code>tcp_port</code> to a negative number designating the port to bind to for accepting new TCP connections.</p> <p>To use a fixed port number, use <code>-X</code> as the value for <code>tcp_port</code>, where <code>X</code> is the desired (positive) port number.</p> <p>To select a random free port, use <code>-1</code> as the value for <code>tcp_port</code>.</p> <p>The port number can be inserted into the server's startup <code>command</code> in your client configuration by using the <code>${port}</code> template variable. It will expand to the absolute value of the bound port.</p>"},{"location":"client_configuration/#per-project-overrides","title":"Per-project overrides","text":"<p>Global LSP settings (which currently are <code>lsp_format_on_save</code>, <code>lsp_format_on_paste</code> and <code>lsp_code_actions_on_save</code>) can be overridden per-project in <code>.sublime-project</code> file:</p> <pre><code>{\n  \"folders\":\n  [\n    {\n      \"path\": \".\"\n    }\n  ],\n  \"settings\": {\n    \"lsp_format_on_save\": true,\n  }\n}\n</code></pre> <p>Also global language server settings can be added or overridden per-project by adding an <code>LSP</code> object within the <code>settings</code> object. A new server configurations can be added there or existing global configurations can be overridden (either fully or partially). Those can override server configurations defined within the <code>clients</code> key in <code>LSP.sublime-settings</code> or those provided by external helper packages.</p> <p>Note: The <code>settings</code> and <code>initializationOptions</code> objects for server configurations will be merged with globally defined server configurations so it's possible to override only certain properties from those objects.</p> <pre><code>{\n  \"folders\":\n  [\n    {\n      \"path\": \".\"\n    }\n  ],\n  \"settings\": {\n    \"LSP\": {\n      \"jsts\": {\n        \"enabled\": false,\n      },\n      \"LSP-eslint\": {\n        \"settings\": {\n          \"eslint.autoFixOnSave\": true  // This property will be merged with original settings for\n                                        // this client (potentially overriding original value).\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#commands-and-shortcuts","title":"Commands and shortcuts","text":"<p>Apart from the commands listed in the Keyboard Shortcuts section, LSP also provides more generic commands in the Command Palette:</p> <ul> <li><code>LSP: Restart Server</code>: restarts running language server belonging to the active window<ul> <li>This command only works when in a document with a running server.</li> </ul> </li> <li><code>Preferences: LSP Settings</code>: opens LSP settings</li> <li><code>Preferences: LSP Key Bindings</code>: opens LSP key bindings configuration - see Keyboard Shortcuts</li> <li><code>LSP: Enable / Disable Language Server Globally</code>: enables or disables chosen server globally (you can disable a server globally and enable it only per project, for example)</li> <li><code>LSP: Enable / Disable Language Server in Project</code>: enables or disables chosen server for the current project (the project must be saved on disk first using <code>Project -&gt; Save Project As...</code>)</li> <li><code>LSP: Troubleshoot Server</code>: allows to troubleshoot chosen server to help diagnose issues</li> <li><code>Preferences: LSP Language ID Mapping Overrides</code>: opens settings that define how to map the file's syntax scope to language server <code>languageId</code> identifier (advanced)</li> </ul>"},{"location":"commands/#execute-server-commands","title":"Execute server commands","text":"<p>For LSP servers that can handle workspace/executeCommand, you can make these commands available in Sublime's Command Palette by adding an entry to your existing <code>*.sublime-commands</code> file or by creating a new one.</p> <p>Example:</p> Packages/User/Default.sublime-commands<pre><code>[\n  // ...\n  {\n    \"caption\": \"Thread First\",\n    \"command\": \"lsp_execute\",\n    \"args\": {\n      \"session_name\": \"LSP-pyright\",\n      \"command_name\": \"thread-first\",\n      \"command_args\": [\"${file_uri}\", 0, 0]\n    }\n  }\n]\n</code></pre> <p>Notes:</p> <ul> <li>the <code>session_name</code> is required and needs to match the server's key within the <code>clients</code> configuration object.</li> <li>the <code>command_args</code> is optional depending on the <code>workspace/executeCommand</code> that are supported by the LSP server.</li> </ul> <p>You can include special variables in the <code>command_args</code> array that will be automatically expanded. Supported variables include Sublime's built-in ones (see the full list in the Build Systems documentation) as well as additional variables listed below. Note that the built-in variables will be expanded regardless of where they are in the array and also within nested arrays or objects while the variables listed below will only be expanded in the top-level array values and only if those values match exactly (will not match if they are sub-strings of values):</p> Variable Type Description <code>\"$document_id\"</code> object JSON object <code>{ \"uri\": string }</code> containing the URI of the active view, see TextDocumentIdentifier <code>\"$versioned_document_id\"</code> object JSON object <code>{ \"uri\": string, \"version\": int }</code> containing the URI and version of the active view, see VersionedTextDocumentIdentifier <code>\"$file_uri\"</code> string File URI of the active view <code>\"$selection\"</code> string Content of the (topmost) selection <code>\"$offset\"</code> int Character offset of the (topmost) cursor position <code>\"$selection_begin\"</code> int Character offset of the begin of the (topmost) selection <code>\"$selection_end\"</code> int Character offset of the end of the (topmost) selection <code>\"$position\"</code> object JSON object <code>{ \"line\": int, \"character\": int }</code> of the (topmost) cursor position, see Position <code>\"$line\"</code> int Zero-based line number of the (topmost) cursor position, see Position <code>\"$character\"</code> int Zero-based character offset relative to the current line of the (topmost) cursor position, see Position <code>\"$range\"</code> object JSON object with <code>\"start\"</code> and <code>\"end\"</code> positions of the (topmost) selection, see Range <code>\"$text_document_position\"</code> object JSON object with <code>\"textDocument\"</code> and <code>\"position\"</code> of the (topmost) selection, see TextDocumentPositionParams"},{"location":"customization/","title":"Customization","text":""},{"location":"customization/#keyboard-shortcuts-key-bindings","title":"Keyboard shortcuts (key bindings)","text":"<p>LSP's key bindings can be edited from the <code>Preferences: LSP Key Bindings</code> command in the Command Palette. Many of the default key bindings (visible in the left view) are disabled to avoid conflicts with default or user key bindings. To enable those, copy them to your user key bindings on the right, un-comment, and pick the key shortcut of your choice. Check also the overview of available Keyboard Shortcuts.</p> <p>If you want to create a new key binding that is different from the ones that are already included, you might want to make it active only when there is a language server with a specific LSP capability (refer to the <code>ServerCapabilities</code> structure in that link) running. In that case, you can make use of the <code>lsp.session_with_capability</code> context. For example, the following key binding overrides <code>ctrl+r</code> to use LSP's symbol provider but only when the current view has a language server with the <code>documentSymbolProvider</code> capability and we're in a javascript or a typescript file:</p> Packages/User/Default.sublime-keymap<pre><code>{\n    \"command\": \"lsp_document_symbols\",\n    \"keys\": [\n        \"ctrl+r\"\n    ],\n    \"context\": [\n        {\n            \"key\": \"lsp.session_with_capability\",\n            \"operator\": \"equal\",\n            \"operand\": \"documentSymbolProvider\"\n        },\n        {\n            \"key\": \"selector\",\n            \"operator\": \"equal\",\n            \"operand\": \"source.ts, source.js\"\n        }\n    ]\n},\n</code></pre> <p>Generally, you should not need to restrict your key bindings to specific scopes and just rely on checking the capability context.</p>"},{"location":"customization/#mouse-map-configuration","title":"Mouse map configuration","text":"<p>If you want to bind some action to a mouse, select <code>Preferences / Mouse Bindings</code> from the main menu and edit the file on the righthand side.</p> <p>Here is an example of a mouse binding that triggers LSP's \"go to symbol definition\" command on pressing the ctrl+left click:</p> Packages/User/Default.sublime-mousemap<pre><code>[\n    {\n        \"button\": \"button1\",\n        \"count\": 1,\n        \"modifiers\": [\"ctrl\"],\n        \"press_command\": \"drag_select\",\n        \"command\": \"lsp_symbol_definition\",\n    }\n]\n</code></pre>"},{"location":"customization/#hover-popups","title":"Hover popups","text":"<p>LSP uses mdpopups to display the popup. You can override its style by creating a <code>Packages/User/mdpopups.css</code> file. In particular, to get the same font in the popup as your <code>\"font_face\"</code> setting in <code>Packages/User/Preferences.sublime-settings</code>, add</p> Packages/User/mdpopups.css<pre><code>html {\n    --mdpopups-font-mono: \"your desired font face\";\n}\n</code></pre> <p>See the mdpopups documentation for more details.</p>"},{"location":"customization/#inlay-hints","title":"Inlay Hints","text":"<p>The styles for inlay hints are defined in the <code>inlay_hints.css</code> file in the root directory of the LSP package. If you would like to adjust the inlay hints style, you can create an override for this file (a restart of Sublime Text is required to apply the changes). But be aware that by doing this, you might miss out on future changes in this file, in case of updates in a new release of the LSP package. So consider using a package like OverrideAudit to get a notification when that happens.</p>"},{"location":"customization/#color-scheme-customizations","title":"Color scheme customizations","text":"<p>Some features use TextMate scopes to control the colors (underline, background or text color) of styled regions in a document or popup. Colors can be customized by adding a rule for these scopes into your color scheme. There is an example in the official ST documentation which explains how to do that.</p> <p>The following tables give an overview of the scope names used by LSP.</p>"},{"location":"customization/#semantic-highlighting","title":"Semantic Highlighting","text":"<p>Note</p> <p>Semantic highlighting is disabled by default. To enable it, set <code>\"semantic_highlighting\": true</code> in your LSP user settings.</p> <p>This feature is only available if the server has the semanticTokensProvider capability.</p> <p>Language servers that support semantic highlighting are for example clangd and rust-analyzer.</p> <p>In order to support semantic highlighting, the color scheme requires a special rule with a background color set for semantic tokens, which is (marginally) different from the original background. LSP automatically adds such a rule to the built-in color schemes from Sublime Text. If you use a custom color scheme, select <code>UI: Customize Color Scheme</code> from the Command Palette and add for example the following code:</p> <pre><code>{\n    \"rules\": [\n        {\n            \"scope\": \"meta.semantic-token\",\n            \"background\": \"#00000101\"\n        },\n    ]\n}\n</code></pre> <p>Furthermore, it is possible to adjust the colors for semantic tokens by applying a foreground color to the individual token types:</p> scope Semantic Token Type <code>meta.semantic-token.namespace</code> namespace <code>meta.semantic-token.type</code> type <code>meta.semantic-token.class</code> class <code>meta.semantic-token.enum</code> enum <code>meta.semantic-token.interface</code> interface <code>meta.semantic-token.struct</code> struct <code>meta.semantic-token.typeparameter</code> typeParameter <code>meta.semantic-token.parameter</code> parameter <code>meta.semantic-token.variable</code> variable <code>meta.semantic-token.property</code> property <code>meta.semantic-token.enummember</code> enumMember <code>meta.semantic-token.event</code> event <code>meta.semantic-token.function</code> function <code>meta.semantic-token.method</code> method <code>meta.semantic-token.macro</code> macro <code>meta.semantic-token.keyword</code> keyword <code>meta.semantic-token.modifier</code> modifier <code>meta.semantic-token.comment</code> comment <code>meta.semantic-token.string</code> string <code>meta.semantic-token.number</code> number <code>meta.semantic-token.regexp</code> regexp <code>meta.semantic-token.operator</code> operator <code>meta.semantic-token.decorator</code> decorator <p>By default, LSP will assign scopes based on the scope naming guideline to each of these token types, but if you define color scheme rules for the scopes specified above, the latter will take precedence.</p> <p>Language servers can also add their custom token types, which are not defined in the protocol. An \"LSP-*\" helper package (or user) can provide a <code>semantic_tokens</code> mapping in the server configuration for such additional token types, or to override the scopes used for the predefined tokens from the table above. The keys of this mapping should be the token types and values should be the corresponding scopes. Semantic tokens with exactly one token modifier can be addressed by appending the modifier after a dot.</p> <pre><code>{\n    \"semantic_tokens\": {\n        \"magicFunction\": \"support.function.builtin\",\n        \"selfParameter\": \"variable.language\",\n        \"type.defaultLibrary\": \"storage.type.builtin\"\n    }\n}\n</code></pre> <p>The color for custom token types can also be adjusted via a color scheme rule for the scope <code>meta.semantic-token.&lt;token-type&gt;</code>, where <code>&lt;token-type&gt;</code> is the name of the custom token type, but with all letters lowercased (similar to the listed scopes in the table above). To target tokens with one modifier, use the scope <code>meta.semantic-token.&lt;token-type&gt;.&lt;token-modifier&gt;</code> (all lowercase). Currently, semantic tokens with more than one modifier cannot be styled reliably.</p> <p>If neither a scope for a custom token type is defined, nor a color scheme rule for this token type exists, then it will only be highlighted via regular syntax highlighting.</p>"},{"location":"customization/#document-highlights","title":"Document Highlights","text":"<p>This feature is only available if the server has the documentHighlightProvider capability.</p> <p>Highlights other occurrences of the symbol at a given cursor position.</p> scope DocumentHighlightKind description <code>markup.highlight.text.lsp</code> Text A textual occurrence <code>markup.highlight.read.lsp</code> Read Read-access of a symbol, like reading a variable <code>markup.highlight.write.lsp</code> Write Write-access of a symbol, like writing to a variable <p>Note</p> <p>If <code>document_highlight_style</code> is set to \"background\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule for the listed scopes.</p>"},{"location":"customization/#hover-highlights","title":"Hover Highlights","text":"<p>Allows to highlight the word or range for which a hover popup is shown (disabled by default).</p> scope <code>markup.highlight.hover.lsp</code> <p>Note</p> <p>If <code>hover_highlight_style</code> is set to \"background\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule.</p>"},{"location":"customization/#diagnostics","title":"Diagnostics","text":"scope DiagnosticSeverity description drawn as <code>markup.error.lsp</code> Error Reports an error Squiggly underlines <code>markup.warning.lsp</code> Warning Reports a warning Squiggly underlines <code>markup.info.lsp</code> Information Reports an information Stippled underlines <code>markup.info.hint.lsp</code> Hint Reports a hint Stippled underlines <p>When the region of the diagnostic spans more than one line, the diagnostic is always drawn as a box.</p> <p>Diagnostics will also optionally include the following scopes:</p> scope diagnostic tag name description <code>markup.unnecessary.lsp</code> Unnecessary Unused or unnecessary code <code>markup.deprecated.lsp</code> Deprecated Deprecated or obsolete code <p>Those scopes can be used to, for example, gray out the text color of unused code, if the server supports that.</p> <p>For example, to add a custom rule for <code>Mariana</code> color scheme, select <code>UI: Customize Color Scheme</code> from the Command Palette and add the following rule:</p> <pre><code>{\n    \"rules\": [\n        {\n            \"scope\": \"markup.unnecessary.lsp\",\n            \"foreground\": \"color(rgb(255, 255, 255) alpha(0.4))\",\n            \"background\": \"#00000101\"\n        }\n    ]\n}\n</code></pre> <p>The color scheme rule only works if the \"background\" color is (marginally) different from the original color scheme background.</p>"},{"location":"customization/#signature-help","title":"Signature Help","text":"scope description <code>entity.name.function.sighelp.lsp</code> Function name in the signature help popup <code>variable.parameter.sighelp.lsp</code> Function argument in the signature help popup <code>variable.parameter.sighelp.active.lsp</code> Function argument which is currently highlighted in the signature help popup <p>Note</p> <p>If there is no special rule for the active parameter in the color scheme, it will be rendered with bold and underlined font style. But if the color scheme defines a different <code>\"foreground\"</code> color for the active parameter, the style follows the <code>\"font_style\"</code> property from the color scheme rule.</p>"},{"location":"customization/#annotations","title":"Annotations","text":"scope description <code>markup.accent.codelens.lsp</code> Accent color for code lens annotations <code>markup.accent.codeaction.lsp</code> Accent color for code action annotations"},{"location":"features/","title":"Features","text":"<p>This package enhances existing concepts from Sublime Text and introduces new concepts not native to Sublime Text. This page provides an overview of the most important capabilities. The capabilities/concepts are accessible in different ways. Some are accessible via the Context Menu by right-clicking with your mouse, or via the top Menu Bar. Others are part of an existing workflow. Almost all capabilities can also be bound to a key with a key binding.</p>"},{"location":"features/#auto-complete","title":"Auto Complete","text":"<p>Example GIF 1</p> <p>Example GIF 2</p> <p>The auto-complete functionality of Sublime Text is well-known to any user. It provides word completions from the current buffer, and, since ST4, completions from other files. It presents the auto-complete widget in a synchronous fashion.</p> <p>The LSP package enhances the auto-complete list with results provided by the language server.</p> <p>To show the documentation popup you can click the More link in the bottom of the autocomplete, or you can use the default sublime keybinding F12 to trigger it.</p> <p>To insert or replace a completion item using the opposite \"completion_insert_mode\" setting value, the following keybinding can be used alt+enter. Note, this feature can only be used if Replace or Insert are shown at the bottom of the autocomplete popup.</p> <p>Example GIF 3</p>"},{"location":"features/#goto-definition","title":"Goto Definition","text":"<p>Example GIF 1</p> <p>Example GIF 2</p> <p>Sublime Text provides a \"Goto Definition\" feature by indexing the files in your project, and building a database out of the parsed files. The feature is accessible by clicking on Goto &gt; Goto Definition. Sublime will attempt to jump to the definition of the word enclosing the caret. The files are parsed according to the <code>.sublime-syntax</code> associated to them. Entities which are assigned the <code>entity.name.*</code> scope are considered to be a \"definition\". Because a single <code>.sublime-syntax</code> file has no knowledge of the project structure, there may be multiple such \"definitions\".</p> <p>This package provides a replacement for Sublime's Goto Definition if your language server has this capability. The feature is accessible by right-clicking with your mouse on the word (or any character) and clicking on LSP &gt; Goto Definition. Similarly, an entry in the Goto menu in the top Menu Bar is also available.</p> <p>In addition to the basic \"Goto Definition\", the protocol also provides further refinements of \"goto\" functionality:</p> <ul> <li>Goto Type Definition</li> <li>Goto Declaration</li> <li>Goto Implementation</li> </ul> <p>Additionally, the LSP's \"Goto Definition\" command can fall back to the built-in Sublime's \"Goto Definition\" if the <code>fallback</code> argument is set to <code>true</code>. This way, when there are no results found the built-in \"Goto Definition\" command will be triggered.</p> <p>To attempt to open the results in a certain group, you can use the <code>group</code> argument. If the specified <code>group</code> does not exist, then it will be ignored.</p>"},{"location":"features/#find-references","title":"Find References","text":"<p>Example GIF 1</p> <p>Example GIF 2</p> <p>By parsing and indexing a project with <code>.sublime-syntax</code> files, Sublime Text is able to provide an approximation of where a type or function is used.</p> <p>This package provides a replacement of that functionality if your language server has this capability.</p> <p>Additionally, the LSP's \"Find References\" command can fall back to the built-in Sublime's \"Goto Reference\" if the <code>fallback</code> argument is set to <code>true</code>. This way, when there are no results found the built-in \"Goto Reference\" command will be triggered.</p>"},{"location":"features/#highlights","title":"Highlights","text":"<p>Example GIF 1</p> <p>Sublime Text subtly highlights words that equal the one under your caret.</p> <p>This package does that as well, if your language server has that capability. It is enhanced in the sense that a language server can also annotate a region as being written to, to being read from. This is what stock Sublime Text cannot determine.</p>"},{"location":"features/#goto-symbol","title":"Goto Symbol","text":"<p>Example GIF 1</p> <p>Example GIF 2</p> <p>Goto Symbol can be accessed by clicking on Goto &gt; Goto Symbol. A common key binding for this is ctrlR. Sublime Text will show a Quick Panel where you can select a symbol from the current buffer. This package provides a replacement if your language server has this capability. Each symbol's type is accurately described, and the start and end positions of each symbol are clearly visible.</p>"},{"location":"features/#goto-symbol-in-project","title":"Goto Symbol In Project","text":"<p>Example GIF 1</p> <p>Goto Symbol In Project is a great feature of Sublime Text. It is like Goto Symbol, except you can search for a symbol through your entire project. It is a two-step UX process where you first select an identifier, and you are then presented with the possible locations of your selected identifier. This package provides a replacement if your language server has this capability. The \"LSP\" Goto Symbol In Project works slightly different because it is a one-step process instead of a two-step process. You select the appropriate symbol immediately.</p>"},{"location":"features/#expand-selection","title":"Expand Selection","text":"<p>Example GIF 1</p> <p>Expand Selection can be accessed by clicking on Selection &gt; Expand Selection. A common key binding for this is ctrlshiftA. A language server may also have this capability and is in a better position to decide what a \"smart\" Expand Selection should do.</p>"},{"location":"features/#hover","title":"Hover","text":"<p>Example GIF 1</p> <p>\"Hover\" is a general term for an informational popup that appears when you bring your mouse to a word in the file. Sublime Text shows the definition(s) and references of the word that is under your caret.</p> <p>The LSP package replaces this built-in hover popup with your language server's hover info, if it has the capability. For instance, it may display type information, documentation, and example usage.</p>"},{"location":"features/#diagnostics","title":"Diagnostics","text":"<p>Example GIF 1</p> <p>Diagnostics is a general term for \"things that are of interest in the file\". It may be syntax errors, warnings from your compiler, or hints about unused variables in a function.</p> <p>It is incorrect to call this \"lint results\", because diagnostics encompass more than just lint results.</p> <p>It is also incorrect to call these \"problems\", as hints are not really problems.</p> <p>Sublime Text has no concept of diagnostics (nor lint results or problems), and hence does not provide an API endpoint to push diagnostics to the end-user. This package invented its own diagnostics presentation system.</p> <p>The SublimeLinter package provides similar functionality.</p>"},{"location":"features/#formatting","title":"Formatting","text":"<p>Example GIF 1</p> <p>Formatting is the art of computing a minimal set of white space text replacements. Formatting may be applied manually through a command invocation, or automatically when saving the file. Sublime Text has no concept of Formatting.</p>"},{"location":"features/#signature-help","title":"Signature Help","text":"<p>Example GIF 1</p> <p>Signature Help is similar to Auto Complete, but focuses on presenting the different overloads of a function invocation. This package provides Signature Help by means of showing a popup. If multiple overloads exist, you can browse through them just like Auto Complete. Sublime Text has no concept of Signature Help.</p>"},{"location":"features/#rename","title":"Rename","text":"<p>Example GIF 1</p> <p>When you want to rename an identifier in Sublime Text, you probably use ctrlD to select a few next occurences and do the rename with multiple cursors.</p> <p>Because a language server (usually) has an abstract syntax tree view of the file, it may be able to rename an identifier semantically. This package exposes that functionality through the hover popup, the context menu, and the top menu bar.</p> <p>Some language servers provide global rename functionality as well. This package will present a modal dialog to ask you to confirm to apply the changes if they span more than one file.</p>"},{"location":"features/#code-actions","title":"Code Actions","text":"<p>Example GIF 1</p> <p>Example GIF 2</p> <p>Code Actions are an umbrella term for \"Quick Fixes\" and \"Refactorings\". They are actions that change the file (or more than one file) to resolve a diagnostic or apply a standard refactor technique. For instance, extracting a block of code into a separate method is usually called \"Extract Method\" and is a \"Refactoring\". Whereas \"add a missing semicolon\" would resolve a diagnostic that warns about a missing semicolon.</p> <p>Formatting is different from Code Actions because Formatting is supposed to not mutate the abstract syntax tree of the file, only move around white space. Any Code Action will mutate the abstract syntax tree.</p> <p>This package presents \"Quick Fix\" Code Actions as a bluish clickable annotation positioned to the right of the viewport. Alternatively, they can be presented as a light bulb in the Gutter Area.</p> <p>Sublime Text has no concept of Code Actions.</p>"},{"location":"features/#code-lenses","title":"Code Lenses","text":"<p>Code Lenses are \"actionable contextual information interspersed\" in your source code.</p> <ul> <li>Actionable: You can click on the link and something happens.</li> <li>Contextual: The links are close to the code they are representing.</li> <li>Interspersed: The links are located throughout your source code.</li> </ul> <p>This package presents Code Lenses as a greenish clickable annotation positioned to the right of the viewport. Alternatively, they can be presented as phantoms.</p> <p>Sublime Text has no concept of Code Lenses.</p> \"show_code_lens\": \"annotation\"\"show_code_lens\": \"phantom\" <p></p> <p></p>"},{"location":"features/#inlay-hints","title":"Inlay Hints","text":"<p>Inlay hints are short textual annotations that show parameter names and type hints for servers that support that feature.</p> <p></p> <p>Inlay hints are disabled by default and can be enabled with the <code>\"show_inlay_hints\": true</code> setting through <code>Preferences: LSP Settings</code>.</p> <p>Some servers require additional settings to be enabled in order to show inlay hints.</p>"},{"location":"features/#server-commands","title":"Server Commands","text":"<p>In Sublime Text you can bind any runnable command to a key or add it to various UI elements. Commands in Sublime Text are normally supplied by plugins or packages written in Python. A language server may provide a runnable command as well. These kinds of commands are wrapped in an <code>lsp_execute</code> Sublime command that you can bind to a key, see Execute server commands for details.</p>"},{"location":"keyboard_shortcuts/","title":"Keyboard Shortcuts","text":"<p>Below is a list of supported commands and the corresponding keyboard shortcut (if assigned). Most of those are also available from the Command Palette, the main menu and the mouse context menu.</p> <p>Refer to the Customization section on how to modify or assign shortcuts to them.</p> <p>Mac</p> <p>If you using macOS, replace ctrl with command.</p> Feature Shortcut Command Auto Complete ctrl space (also on macOS) <code>auto_complete</code> Expand Selection unbound <code>lsp_expand_selection</code> Find References shift f12 <code>lsp_symbol_references</code>Supports optional args: <code>{\"include_declaration\": true | false, \"output_mode\": \"output_panel\" | \"quick_panel\"}</code>.Triggering from context menus while holding ctrl opens in \"side by side\" mode. Holding shift triggers opposite behavior relative to what <code>show_references_in_quick_panel</code> is set to. Fold unbound <code>lsp_fold</code>Supports optional args: <code>{\"strict\": true/false}</code> - to configure whether to fold only when the caret is contained within the folded region (<code>true</code>), or even when it is anywhere on the starting line (<code>false</code>). Fold All unbound <code>lsp_fold_all</code>Supports optional args: <code>{\"kind\": \"comment\" | \"imports\" | \"region\"}</code>. Follow Link unbound <code>lsp_open_link</code> Format File unbound <code>lsp_format_document</code> Format Selection unbound <code>lsp_format_document_range</code> Goto Declaration unbound <code>lsp_symbol_declaration</code> Goto Definition unboundsuggested: f12 <code>lsp_symbol_definition</code> Goto Diagnostic unboundsuggested: f8 <code>lsp_goto_diagnostic</code>With args: <code>{\"uri\": \"$view_uri\"}</code>. Goto Diagnostic in Project unboundsuggested: shift f8 <code>lsp_goto_diagnostic</code> Goto Implementation unbound <code>lsp_symbol_implementation</code> Goto Symbol in Project unboundsuggested: ctrl shift r <code>lsp_workspace_symbols</code> Goto Symbol unboundsuggested: ctrl r <code>lsp_document_symbols</code> Goto Type Definition unbound <code>lsp_symbol_type_definition</code> Hover Popup unbound <code>lsp_hover</code> Insert/Replace Completions alt enter <code>lsp_commit_completion_with_opposite_insert_mode</code> Next Diagnostic unbound <code>lsp_next_diagnostic</code> Previous Diagnostic unbound <code>lsp_prev_diagnostic</code> Rename unbound <code>lsp_symbol_rename</code> Restart Server unbound <code>lsp_restart_server</code> Run Code Action unbound <code>lsp_code_actions</code> Run Code Lens unbound <code>lsp_code_lens</code> Run Refactor Action unbound <code>lsp_code_actions</code>With args: <code>{\"only_kinds\": [\"refactor\"]}</code>. Run Source Action unbound <code>lsp_code_actions</code>With args: <code>{\"only_kinds\": [\"source\"]}</code>. Save All unbound <code>lsp_save_all</code>Supports optional args <code>{\"only_files\": true | false}</code> - whether to ignore buffers which have no associated file on disk. Show Call Hierarchy unbound <code>lsp_call_hierarchy</code> Show Type Hierarchy unbound <code>lsp_type_hierarchy</code> Signature Help ctrl alt space <code>lsp_signature_help_show</code> Toggle Diagnostics Panel ctrl alt m <code>lsp_show_diagnostics_panel</code> Toggle Inlay Hints unbound <code>lsp_toggle_inlay_hints</code>Supports optional args: <code>{\"enable\": true | false}</code>. Toggle Log Panel unbound <code>lsp_toggle_server_panel</code>"},{"location":"language_servers/","title":"Language Servers","text":"<p>Follow the setup steps for a language server to get it up and running.</p> <p>If you encounter problems, consult the common issues page or search the LSP issues before opening new ones.</p> <p>If there are no setup steps for a language server on this page, but a language server implementation exist, follow the guide for creating a client configuration. Pull requests for adding a new client configuration are welcome.</p> <p>We recommend installing LSP-json.</p> <p>LSP-json provides completions and diagnostics when editing JSON files that adhere to a JSON schema.</p> <p>For legacy ST3 docs, see lsp.readthedocs.io.</p>"},{"location":"language_servers/#angular","title":"Angular","text":"<p>Follow installation instructions on LSP-angular.</p>"},{"location":"language_servers/#assembly","title":"Assembly","text":"<ol> <li> <p>Install <code>asm-lsp</code> via Cargo (see github:bergercookie/asm-lsp):</p> <pre><code>cargo install asm-lsp\n</code></pre> </li> <li> <p>Install the x86 and x86_64 Assembly package from Package Control.</p> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"asm-lsp\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"asm-lsp\": {\n            \"enabled\": true,\n            \"command\": [\"asm-lsp\"],\n            \"selector\": \"source.asm | source.assembly\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#bash","title":"Bash","text":"<p>Follow installation instructions on LSP-bash.</p> <p>Also see Shell.</p>"},{"location":"language_servers/#bicep","title":"Bicep","text":"<p>Follow installation instructions on LSP-Bicep.</p>"},{"location":"language_servers/#cc","title":"C/C++","text":"<p>Follow installation instructions on LSP-clangd.</p>"},{"location":"language_servers/#c","title":"C#","text":"<p>Follow installation instructions on LSP-OmniSharp.</p>"},{"location":"language_servers/#clojure","title":"Clojure","text":"<ol> <li>Download clojure-lsp.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"clojure-lsp\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"clojure-lsp\": {\n            \"enabled\": true,\n            \"command\": [\"/PATH/TO/clojure-lsp\"], // Update the PATH\n            \"selector\": \"source.clojure\",\n            \"initializationOptions\": {}\n        }\n    }\n}\n</code></pre> </li> </ol> <p>See available initializationOptions.</p>"},{"location":"language_servers/#css","title":"CSS","text":"<p>Follow installation instructions on LSP-css.</p>"},{"location":"language_servers/#d","title":"D","text":"<ol> <li>Install the D Language Server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"serve-d\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"serve-d\": {\n            \"enabled\": true,\n            \"command\": [\"C:/Users/MY_NAME_HERE/AppData/Roaming/code-d/bin/serve-d.exe\"],\n            \"selector\": \"source.d\",\n            \"settings\": {\n                \"d.dcdServerPath\": \"C:/Users/MY_NAME_HERE/AppData/Roaming/code-d/bin/dcd-server.exe\",\n                \"d.dcdClientPath\": \"C:/Users/MY_NAME_HERE/AppData/Roaming/code-d/bin/dcd-client.exe\",\n            }\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#dart","title":"Dart","text":"<p>Follow installation instructions on LSP-Dart.</p>"},{"location":"language_servers/#dockerfile","title":"Dockerfile","text":"<p>Follow installation instructions on LSP-dockerfile.</p>"},{"location":"language_servers/#elixir","title":"Elixir","text":"<p>Follow installation instructions on LSP-elixir.</p>"},{"location":"language_servers/#elm","title":"Elm","text":"<p>Follow installation instructions on LSP-elm.</p>"},{"location":"language_servers/#erlang","title":"Erlang","text":"<ol> <li>Install the Erlang Language Server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"erlang-ls\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"erlang-ls\": {\n            \"enabled\": true,\n            \"command\": [ \"/PATH/TO/erlang_ls\", \"--transport\", \"stdio\" ], // Update the PATH\n            \"selector\": \"source.erlang\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#f","title":"F#","text":"<ol> <li>Install the F# package from Package Control for syntax highlighting.</li> <li>Make sure you have installed the latest .NET SDK.</li> <li> <p>Install the FsAutoComplete from command prompt using the following command:</p> <pre><code>dotnet tool install --global fsautocomplete\n</code></pre> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"fsautocomplete\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"fsautocomplete\": {\n            \"enabled\": true,\n            \"command\": [\"fsautocomplete\"],\n            \"selector\": \"source.fsharp\",\n            \"initializationOptions\": {\n                \"AutomaticWorkspaceInit\": true\n            }\n        }\n    }\n}\n</code></pre> </li> </ol> <p>A note about .NET Tools and $PATH</p> <p>If the <code>fsautocomplete</code> executable isn't on your $PATH after installing it globally, ensure the .NET global tools location (by default <code>$HOME/.dotnet/tools</code>) is on your $PATH.</p>"},{"location":"language_servers/#fortran","title":"Fortran","text":"<ol> <li>Install the ModernFortran or the Fortran package from Package Control for syntax highlighting.</li> <li>Install the fortls language server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"fortls\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"fortls\": {\n            \"enabled\": true,\n            \"command\": [\"fortls\", \"--notify_init\"],\n            \"selector\": \"source.fortran | source.modern-fortran | source.fixedform-fortran\"\n        }\n    }\n}\n</code></pre> </li> </ol> <p>See available configuration options.</p>"},{"location":"language_servers/#go","title":"Go","text":"<p>Follow installation instructions on LSP-gopls.</p> <p>Visit gopls repo for more info.</p> <p>Enable multi-module workspace support by setting the <code>experimentalWorkspaceModule</code> to <code>true</code>. Most features will work across modules, but some, such as <code>goimports</code>, will not work as expected. Please note that this setting is still very experimental.</p>"},{"location":"language_servers/#gdscript-godot-engine","title":"GDScript (Godot Engine)","text":"<ol> <li>Install the GDScript (Godot Engine) package from Package Control for syntax highlighting.</li> <li>Launch the Godot Editor on the project you are working on and leave it running.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"godot-lsp\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"godot-lsp\": {\n            \"enabled\": true,\n            \"command\": [\"/PATH/TO/godot-editor.exe\"], // Update the PATH\n            \"tcp_port\": 6005, // Older versions of Godot(3.x) use port 6008\n            \"selector\": \"source.gdscript\",\n        }\n    }\n}\n</code></pre> </li> </ol> <p>If you encounter high cpu load or any other issues you can try omitting the [command] line, and ensure the godot editor is running while you work in sublime.</p>"},{"location":"language_servers/#graphql","title":"GraphQL","text":"<p>Follow installation instructions on LSP-graphql.</p>"},{"location":"language_servers/#haskell","title":"Haskell","text":"<ol> <li>Install haskell-language-server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"haskell-language-server\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"haskell-language-server\": {\n            \"enabled\": true,\n            \"command\": [\"haskell-language-server-wrapper\", \"--lsp\"],\n            \"selector\": \"source.haskell\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#helm","title":"Helm","text":"<ol> <li>Install helm-ls.</li> <li>(Optional &amp; recommended) Install yaml-language-server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"helm-ls\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"helm-ls\": {\n            \"enabled\": true,\n            \"command\": [\"helm_ls\", \"serve\"],\n            \"selector\": \"source.yaml.go\", // Requires ST 4181+. Use `source.yaml` otherwise.\n        },\n    },\n}\n</code></pre> </li> </ol> <p>Note that the YAML language server on its own does not function properly for Helm files, which is why helm-ls interfaces with it directly. The default configuration of LSP-yaml disables itself for Go-templated files.</p>"},{"location":"language_servers/#html","title":"HTML","text":"<p>Follow installation instructions on LSP-html.</p>"},{"location":"language_servers/#java","title":"Java","text":"<p>Follow installation instructions on LSP-jdtls.</p>"},{"location":"language_servers/#javascripttypescript","title":"JavaScript/TypeScript","text":"<p>See also Vue.</p> <p>There are multiple options:</p>"},{"location":"language_servers/#biome","title":"Biome","text":"<p>Follow installation instructions on LSP-biome.</p>"},{"location":"language_servers/#deno","title":"Deno","text":"<p>Follow installation instructions on LSP-Deno.</p>"},{"location":"language_servers/#eslint","title":"ESLint","text":"<p>Follow installation instructions on LSP-eslint.</p>"},{"location":"language_servers/#flow","title":"Flow","text":"<p>Follow installation instructions on LSP-flow.</p>"},{"location":"language_servers/#quick-lint-js","title":"quick-lint-js","text":"<ol> <li>Install the quick-lint-js LSP server for JavaScript.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"quick-lint-js\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"quick-lint-js\": {\n            \"command\": [\"quick-lint-js\", \"--lsp-server\"],\n            \"enabled\": true,\n            \"selector\": \"source.js\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#typescript-language-server","title":"TypeScript Language Server","text":"<p>Follow installation instructions on LSP-typescript.</p>"},{"location":"language_servers/#json","title":"JSON","text":"<p>Follow installation instructions on LSP-json.</p>"},{"location":"language_servers/#julia","title":"Julia","text":"<p>Follow installation instructions on LSP-julia.</p>"},{"location":"language_servers/#kotlin","title":"Kotlin","text":"<ol> <li>Install the Kotlin package from Package Control for syntax highlighting.</li> <li>Install the Kotlin Language Server (requires building first).</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"kotlinls\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"kotlinls\": {\n            \"enabled\": true,\n            \"command\": [\"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\"], // Update the PATH\n            \"selector\": \"source.Kotlin\",\n            \"settings\": {\n                \"kotlin\": {\n                    // put your server settings here\n                }\n            }\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#latex","title":"LaTeX","text":""},{"location":"language_servers/#texlab","title":"TexLab","text":"<p>Follow installation instructions on LSP-TexLab.</p>"},{"location":"language_servers/#ltex","title":"LTeX","text":"<p>Spell check can be provided by LSP-ltex-ls.</p>"},{"location":"language_servers/#digestif","title":"Digestif","text":"<ol> <li>Follow installation instructions for Digestif to install the server, and make sure it is available in your PATH.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"digestif\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"digestif\": {\n            \"enabled\": true,\n            \"command\": [\"digestif\"],\n            \"selector\": \"text.tex.latex\"\n        }\n    }\n}\n</code></pre> </li> <li> <p>To enable auto-completions for the relevant situations in LaTeX files, adjust Sublime's <code>\"auto_complete_selector\"</code> setting (<code>Preferences &gt; Settings</code>); for example</p> <pre><code>{\n    \"auto_complete_selector\": \"meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc, text.tex constant.other.citation, text.tex constant.other.reference, text.tex support.function, text.tex variable.parameter.function\",\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#lisp","title":"Lisp","text":"<ol> <li>Install cc-lsp using Roswell.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"cc-lsp\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"cc-lsp\": {\n            \"enabled\": true,\n            \"command\": [\"cl-lsp\", \"stdio\"],\n            \"selector\": \"source.lisp\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#leo","title":"Leo","text":"<p>Follow installation instructions on LSP-leo.</p>"},{"location":"language_servers/#lua","title":"Lua","text":"<p>Follow installation instructions on LSP-lua.</p>"},{"location":"language_servers/#markdown","title":"Markdown","text":"<p>Spell check can be provided by LSP-ltex-ls.</p>"},{"location":"language_servers/#markmark","title":"markmark","text":"<p>Markmark is a language server for Markdown files, supporting go to definition / references and more.</p> <ol> <li>Install Markmark (requires <code>Node &gt;= 16</code>)</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"markmark\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"markmark\": {\n            \"enabled\": true,\n            \"command\": [\"markmark-lsp\", \"--stdio\"],\n            \"selector\": \"text.html.markdown\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#marksman","title":"Marksman","text":"<p>An LSP server for Markdown that provides completion, go to definition, find references, diagnostics, and more.</p> <p>Follow installation instructions on LSP-marksman.</p>"},{"location":"language_servers/#mediawiki","title":"MediaWiki","text":"<ol> <li>Install the Mediawiker package from Package Control for syntax highlighting.</li> <li> <p>Install the <code>wikitext-lsp</code> package:</p> <pre><code>npm install -g wikitext-lsp\n</code></pre> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"mediawiki\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"mediawiki\": {\n            \"enabled\": true,\n            \"command\": [\n                \"/path/to/your/node\", \n                \"/path/to/your/globally/installed/wikitext-lsp\",\n                \"--stdio\"\n            ],\n            \"selector\": \"text.html.mediawiki\",\n            \"settings\": {\n                // Please refer to https://www.npmjs.com/package/wikitext-lsp#configuration\n            }\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#nim","title":"Nim","text":"<p>Follow installation instructions on LSP-nimlangserver.</p>"},{"location":"language_servers/#ocamlreason","title":"OCaml/Reason","text":"<ol> <li>Install the Reason package from Package Control for syntax highlighting.</li> <li>Install the Reason Language Server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"reason\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"reason\": {\n            \"enabled\": true,\n            \"command\": [\"PATH/TO/reason-language-server.exe\"], // Update the PATH\n            \"selector\": \"source.ocaml | source.reason\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#odin","title":"Odin","text":"<p>Follow installation instructions on ols.</p>"},{"location":"language_servers/#perl","title":"Perl","text":"<ol> <li>Install Perl Navigator. The below example configuration assumes global NPM installation.</li> <li>Install Perl::Critic, Perl::Tidy, etc. as required.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"perlnavigator\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"perlnavigator\": {\n            \"enabled\": true,\n            \"command\": [\n                \"/path/to/your/node\", \n                \"/path/to/your/globally/installed/perlnavigator\",\n                \"--stdio\"\n            ],\n            \"selector\": \"source.perl\",\n            \"settings\": {\n                // \"perlnavigator.perltidyProfile\": \"~/.perltidyrc\",\n                // \"perlnavigator.perlcriticProfile\": \"~/.perlcriticrc\",\n                // \"perlnavigator.perlEnvAdd\": true,\n                // \"perlnavigator.perlEnv\": {\n                //     \"KOHA_CONF\": \"/home/user/git/KohaCommunity/t/data/koha-conf.xml\",\n                // },\n                // \"perlnavigator.perlPath\": \"~/perl5/perlbrew/perls/perl-5.38.2/bin\",\n                // \"perlnavigator.perlcriticSeverity\": 1,\n                // \"perlnavigator.perlcriticEnabled\": true,\n                // \"perlnavigator.enableWarnings\": true,\n                \"perlnavigator.includePaths\": [\n                    // Used for syntax checking, typically local project roots.\n                    // NOT used for finding installed modules such as perlcritic/perltidy/perlimports.\n                    // Supports \"$workspaceFolder\", no need to include \"$workspaceFolder/lib/\".\n                ],\n                \"perlnavigator.perlParams\": [\n                    // This is a list of arguments always passed to Perl.\n                    // Does not support $workspaceFolder.\n                    // Useful for finding perlcritic/perltidy/perlimports.\n                    // \"-I/path/to/local/perl5/bin\"\n                ]\n            }\n        }\n    },\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#promql","title":"PromQL","text":"<p>Follow installation instructions on LSP-promql.</p>"},{"location":"language_servers/#php","title":"PHP","text":"<p>There are multiple options:</p>"},{"location":"language_servers/#intelephense","title":"Intelephense","text":"<p>Follow installation instructions on LSP-intelephense.</p>"},{"location":"language_servers/#phpactor","title":"Phpactor","text":"<ol> <li>Install Phpactor globally.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"phpactor\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"phpactor\": {\n            \"enabled\": true,\n            \"command\": [\"PATH/TO/phpactor\", \"language-server\"],\n            \"selector\": \"embedding.php\",\n            \"priority_selector\": \"source.php\",\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#powershell","title":"PowerShell","text":"<p>Follow installation instructions on LSP-PowerShellEditorServices.</p>"},{"location":"language_servers/#python","title":"Python","text":"<p>There are multiple options:</p>"},{"location":"language_servers/#pyright","title":"Pyright","text":"<p>A full-featured, standards-based static type checker for Python. It is designed for high performance and can be used with large Python source bases.</p> <p>Follow installation instructions on LSP-pyright.</p>"},{"location":"language_servers/#python-lsp-server-pylsp","title":"Python LSP Server (pylsp)","text":"<p>A Jedi-powered language server that also supports running various linters through built-in plugins.</p> <p>Follow installation instructions on LSP-pylsp.</p>"},{"location":"language_servers/#pyrefly","title":"Pyrefly","text":"<p>A fast Python type checker written in Rust.</p> <ol> <li> <p>Follow the instructions on the Pyrefly website to install the <code>pyrefly</code> command-line tool.</p> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"pyrefly\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"pyrefly\": {\n            \"enabled\": true,\n            \"command\": [\"pyrefly\", \"lsp\"],\n            \"selector\": \"source.python\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#lsp-ruff","title":"LSP-ruff","text":"<p>An extremely fast Python linter and code transformation tool, written in Rust.</p> <p>Follow installation instructions on LSP-ruff.</p>"},{"location":"language_servers/#r","title":"R","text":"<p>Follow installation instructions on R-IDE.</p>"},{"location":"language_servers/#racket","title":"Racket","text":"<ol> <li>Install the Racket package from Package Control for syntax highlighting.</li> <li>Follow the instructions for installation at racket-langserver.</li> <li>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"racket-langserver\"</code> client configuration to the <code>\"clients\"</code>:</li> </ol> <pre><code>{\n    \"clients\": {\n        \"racket-langserver\": {\n            \"enabled\": true,\n            \"command\": [\"racket\", \"-l\", \"racket-langserver\"],\n            \"selector\": \"source.racket\"\n        }\n    }\n}\n</code></pre>"},{"location":"language_servers/#ruby-ruby-on-rails","title":"Ruby / Ruby on Rails","text":"<p>There are multiple options:</p>"},{"location":"language_servers/#solargraph","title":"Solargraph","text":"<ol> <li> <p>Install solargraph.</p> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"ruby\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"ruby\": {\n            \"enabled\": true,\n            \"command\": [\"solargraph\", \"stdio\"],\n            \"selector\": \"source.ruby\",\n            \"initializationOptions\": {\n                \"diagnostics\": true\n            }\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#sorbet","title":"Sorbet","text":"<ol> <li> <p>Install the <code>sorbet</code> and <code>sorbet-runtime</code> gem (see github:sorbet/sorbet):</p> <pre><code>gem install sorbet\ngem install sorbet-runtime\n</code></pre> <p>If you have a Gemfile, using bundler, add sorbet and sorbet-runtime to your Gemfile and run:</p> <pre><code>bundle install\n</code></pre> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"sorbet\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"sorbet\": {\n            \"enabled\": true,\n            \"command\": [\"srb\", \"tc\", \"--typed\", \"true\", \"--enable-all-experimental-lsp-features\", \"--lsp\", \"--disable-watchman\", \".\"],\n            \"selector\": \"source.ruby\",\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#stimulus-lsp","title":"Stimulus LSP","text":"<ol> <li> <p>Install the <code>stimulus-language-server</code> package (see github:marcoroth/stimulus-lsp):</p> <pre><code>npm install -g stimulus-language-server\n</code></pre> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"stimulus\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"stimulus\": {\n            \"enabled\": true,\n            \"command\": [\"stimulus-language-server\", \"--stdio\"],\n            \"selector\": \"text.html.rails\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#ruby-lsp","title":"Ruby LSP","text":"<ol> <li> <p>Install the <code>ruby-lsp</code> gem (see github:Shopify/ruby-lsp):</p> <pre><code>gem install ruby-lsp\n</code></pre> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"ruby-lsp\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"ruby-lsp\": {\n            \"enabled\": true,\n            \"command\": [\"ruby-lsp\"],\n            \"selector\": \"source.ruby | text.html.rails\",\n            \"initializationOptions\": {\n                \"enabledFeatures\": {\n                    \"diagnostics\": true\n                },\n                \"experimentalFeaturesEnabled\": true\n            }\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#steep","title":"Steep","text":"<ol> <li> <p>Install the <code>steep</code> gem (see github:soutaro/steep):</p> <pre><code>gem install steep\n</code></pre> </li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"steep\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"steep\": {\n            \"enabled\": true,\n            \"command\": [\"steep\", \"langserver\"],\n            \"selector\": \"source.ruby\",\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#herb","title":"Herb","text":"<p>Follow installation instructions on Herb Language Server.</p>"},{"location":"language_servers/#rust","title":"Rust","text":"<p>Follow installation instructions on LSP-rust-analyzer.</p>"},{"location":"language_servers/#sass","title":"Sass","text":"<p>Follow installation instructions on LSP-some-sass.</p>"},{"location":"language_servers/#scala","title":"Scala","text":"<p>Follow installation instructions on LSP-metals.</p>"},{"location":"language_servers/#shell","title":"Shell","text":"<ol> <li>Install shellcheck (follow instructions in the repo).</li> <li> <p>Install the diagnostic-languageserver server.</p> <p><pre><code># with NPM\nnpm i -g diagnostic-languageserver\n# or with Yarn\nyarn global add diagnostic-languageserver\n</code></pre> 3.  Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"diagnostic-ls\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"diagnostic-ls\": {\n            \"enabled\": true,\n            \"command\": [\"diagnostic-languageserver\", \"--stdio\"],\n            \"selector\": \"source.shell.bash\",\n            \"initializationOptions\": {\n                \"linters\": {\n                    \"shellcheck\": {\n                        \"command\": \"shellcheck\",\n                        \"args\": [\"--format=json\", \"-\"],\n                        \"debounce\": 100,\n                        \"formatLines\": 1,\n                        \"offsetLine\": 0,\n                        \"offsetColumn\": 0,\n                        \"sourceName\": \"shellcheck\",\n                        \"parseJson\": {\n                            \"line\": \"line\",\n                            \"column\": \"column\",\n                            \"endLine\": \"endLine\",\n                            \"endColumn\": \"endColumn\",\n                            \"security\": \"level\",\n                            \"message\": \"\\\\${message} [\\\\${code}]\",\n                        },\n                        \"securities\": {\n                            \"error\": \"error\",\n                            \"warning\": \"warning\",\n                            \"note\": \"info\",\n                        },\n                    }\n                },\n                \"formatters\": {},\n                \"filetypes\": {\n                    \"shellscript\": \"shellcheck\",\n                }\n            }\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#solidity","title":"Solidity","text":"<ol> <li>Install the Ethereum package from Package Control for syntax highlighting.</li> <li>Install the github:NomicFoundation/hardhat-vscode language server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"solidity\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"solidity\": {\n            \"enabled\": true,\n            \"command\": [\"nomicfoundation-solidity-language-server\", \"--stdio\"],\n            \"selector\": \"source.solidity\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#stylelint","title":"Stylelint","text":"<p>Follow installation instructions on LSP-stylelint.</p>"},{"location":"language_servers/#svelte","title":"Svelte","text":"<p>Follow installation instructions on LSP-svelte.</p>"},{"location":"language_servers/#swift","title":"Swift","text":"<p>Follow installation instructions on LSP-SourceKit.</p>"},{"location":"language_servers/#systemverilog","title":"SystemVerilog","text":"<ol> <li>Install the SystemVerilog package from Package Control for syntax highlighting.</li> <li>Make sure you install the latest version of Verible.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"verible\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"verible\": {\n            \"enabled\": true,\n            \"command\": [\n                \"/PATH/TO/verible-verilog-ls\"\n            ],\n            \"selector\": \"source.systemverilog\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#tagml","title":"TAGML","text":"<p>Follow installation instructions on LSP-tagml.</p>"},{"location":"language_servers/#tailwind-css","title":"Tailwind CSS","text":"<p>Follow installation instructions on LSP-tailwindcss.</p>"},{"location":"language_servers/#terraform","title":"Terraform","text":"<p>Follow installation instructions on LSP-terraform.</p>"},{"location":"language_servers/#toit","title":"Toit","text":"<ol> <li>Install the Toit package from Package Control for syntax highlighting.</li> <li>Install the Jaguar Language Server.</li> <li> <p>Open <code>Preferences &gt; Package Settings &gt; LSP &gt; Settings</code> and add the <code>\"jag\"</code> client configuration to the <code>\"clients\"</code>:</p> <pre><code>{\n    \"clients\": {\n        \"jag\": {\n            \"enabled\": true,\n            \"command\": [\"jag\" \"lsp\"],\n            \"selector\": \"source.toit\"\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"language_servers/#twig","title":"Twig","text":"<p>Follow installation instructions on LSP-twiggy.</p>"},{"location":"language_servers/#typescript","title":"TypeScript","text":"<p>See Javascript/TypeScript.</p>"},{"location":"language_servers/#typst","title":"Typst","text":"<p>Follow installation instructions on LSP-Tinymist.</p>"},{"location":"language_servers/#vue","title":"Vue","text":"<p>There are multiple options:</p>"},{"location":"language_servers/#vue-language-server","title":"Vue Language Server","text":"<p>Recommended, actively maintained package based on vuejs/language-tools.</p> <p>Follow installation instructions on LSP-vue.</p>"},{"location":"language_servers/#volar","title":"Volar","text":"<p>Based on 1.x version of Volar (later renamed to Vue Language Server). Not recommended.</p> <p>Follow installation instructions on LSP-volar.</p>"},{"location":"language_servers/#vetur","title":"Vetur","text":"<p>No longer maintained, not compatible with TypeScript 5+ or new Vue versions.</p> <p>Follow installation instructions on LSP-vetur.</p>"},{"location":"language_servers/#vala","title":"Vala","text":"<ol> <li>Install the Vala-TMBundle package from Package Control to add Vala syntax highlighting and for Vala files to be reconginsed.</li> <li>Install the Vala Language Server</li> <li> <p>Add Vala Langauge Server to LSP settings:</p> <pre><code>{\n    \"clients\": {\n        \"vala-language-server\": {\n            \"enabled\": true,\n            \"command\": [\n                \"/path/to/vala-language-server\"\n            ],\n            \"selector\": \"source.vala | source.genie\"\n        },\n    },\n}\n</code></pre> </li> </ol> <p>Only works for certain project types. Visit vala-language-server repo for more details.</p>"},{"location":"language_servers/#xml","title":"XML","text":"<p>Follow installation instructions on LSP-lemminx.</p>"},{"location":"language_servers/#yaml","title":"YAML","text":"<p>Follow installation instructions on LSP-yaml.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#self-help-instructions","title":"Self-help instructions","text":"<p>Following are the primary places to look at when diagnosing issues:</p> <ol> <li>Run <code>LSP: Toggle Log Panel</code> from the Command Palette to see communication logs between the server and the client. It allows to see what the server is doing exactly.</li> <li>Open the Sublime Text console by going to <code>View</code> -&gt; <code>Show Console</code> from the main menu. It provides information about installed packages, potential LSP crashes and additional LSP debugging logs when <code>log_debug</code> is enabled in <code>Preferences: LSP Settings</code>.</li> <li>Focus the relevant file, then run <code>LSP: Troubleshoot server</code> from the Command Palette and select a server to see troubleshooting information. It can be a very efficient way to diagnose problems quickly when shared.</li> </ol> <p>Note</p> <p>In case of reporting an issue, consider providing all before-mentioned logs. If you can reproduce the issue, then restarting Sublime Text before capturing the logs can help improve clarity of the logs.</p>"},{"location":"troubleshooting/#updating-the-path-used-by-lsp-servers","title":"Updating the PATH used by LSP servers","text":"<p>Sublime Text might see a different <code>PATH</code> from what your shell environment uses and might not be able to find the server binary due to that. You can see what ST thinks your <code>PATH</code> is by opening the ST console by clicking on View &gt; Show Console, and running <code>import os; os.environ[\"PATH\"]</code> in that console.</p> <p>The solution is to make ST use the same <code>PATH</code> that is read by your shell (or OS in general in the case of Windows).</p> <p>Adjusting <code>PATH</code> can differ based on the operating system and the default shell used. Refer to the following table on where this should be adjusted:</p> Windows Open Start Menu, type \"environment\" and select \"Edit environment variables for your account\". Modify the \"Path\" variable so that it includes the directory path to the program of your choice. macOS Depending on your default shell (macOS ships with zsh shell by default), edit: <code>~/.zprofile</code> (zsh), <code>~/.profile</code> (bash) or <code>~/.config/fish/config.fish</code> (fish). Linux Edit <code>~/.profile</code>. <p>For macOS and Linux you can extend the path like so:</p> <pre><code>export PATH=\"/usr/local/bin:$PATH\"\n</code></pre> <p>For package managers like <code>nvm</code> (Node version manager), the recommended way is to insert its initialization script in the respective location specified above.</p> <p>Note</p> <p>On macOS, it's enough to restart ST for the changes to be picked up. On other platforms, you might have to re-login your user account.</p> <p>Another solution could be (at least on Linux) to update the server <code>PATH</code> using the <code>env</code>parameter in your LSP configuration file. The following template can be used where:</p> <ul> <li><code>&lt;your_language_server_name&gt;</code> is the server name</li> <li><code>&lt;added_path&gt;</code> is the directory needed for the server to behave correctly</li> </ul> <pre><code>\"&lt;your_language_server_name&gt;\":\n{\n    // ...\n\n    \"env\":\n    {\n        \"PATH\": \"&lt;added_path&gt;:/usr/local/bin\"\n    }\n}\n</code></pre>"},{"location":"troubleshooting/#common-problems","title":"Common problems","text":""},{"location":"troubleshooting/#error-dialog-saying-failed-to-start","title":"Error dialog saying <code>Failed to start...</code>","text":"<p>If you are getting an error that the server binary can't be found (<code>No such file or directory...</code>) but it does start when Sublime Text is started from the terminal, then the issue is likely due to Sublime Text's internal environment not picking up the same <code>PATH</code> environment variable as you've configured in your shell. See \"Updating the PATH used by LSP servers\" on how to fix that.</p> <p>Otherwise refer to the \"Self-help instructions\" section to try to understand the issue better.</p>"},{"location":"troubleshooting/#lsp-doesnt-start-my-language-server","title":"LSP doesn't start my language server","text":"<p>When language server is started, its name appears on the left side of the status bar. If you expect your server to start for a particular file but it doesn't then:</p> <ul> <li>Make sure that the root scope (eg. <code>source.php</code>) of the file matches the scope handled by the language server. You can check the root scope of the file by running <code>Show Scope Name</code> from the <code>Tools -&gt; Developer</code> menu. Refer to the documentation of the language server or its own settings to know the expected scope.</li> <li>Make sure that the language server is not disabled globally either in its own settings, in <code>Preferences: LSP Settings</code> or in the project settings (<code>Project: Edit Project</code> from the Command Palette).</li> </ul>"},{"location":"troubleshooting/#completions-not-shown-after-certain-keywords","title":"Completions not shown after certain keywords","text":"<p>Sublime Text's built-in <code>Completion Rules.tmPreferences</code> for some languages suppresses completions after certain keywords. The solution is to put an edited version of the <code>Completion Rules.tmPreferences</code> in the <code>Packages</code> folder. More details on workaround and a final fix for Lua.</p>"}]}