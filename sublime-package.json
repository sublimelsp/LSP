{
  "contributions": {
    "settings": [
      {
        "schema": {
          "$id": "sublime://settings/LSP",
          "definitions": {
            // User preferences that are shared with "Preferences.sublime-settings"
            "lsp_format_on_save": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Run the server's formatProvider (if supported) on a document before saving. This option is also supported in syntax-specific settings and/or in the `\"settings\"` section of project files."
            },
            "lsp_code_actions_on_save": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              },
              "propertyNames": {
                "pattern": "^source\\."
              },
              "markdownDescription": "A dictionary of code action identifiers that should be triggered on save.\n\nCode action identifiers are not officially standardized so refer to specific server's documentation on what is supported but `source.fixAll` is commonly used to apply fix-on-save code actions.\n\nThis option is also supported in syntax-specific settings and/or in the `\"settings\"` section of project files. Settings from all those places will be merged and more specific (syntax and project) settings will override less specific (from LSP or Sublime settings).\n\nOnly \"source.*\" actions are supported."
            },
            // Deprecated syntaxes and scopes
            "useSelectorInstead": {
              "type": "string",
              "deprecationMessage": "Use the \"selector\" key instead."
            },
            "FileWatcher": {
              "type": "object",
              "examples": [
                {
                  "patterns": ["{**/*.js,**/*.ts,**/*.json}"],
                }
              ],
              "additionalProperties": false,
              "required": ["patterns"],
              "properties": {
                "patterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true
                },
                "events": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "create",
                      "change",
                      "delete"
                    ]
                  },
                  "uniqueItems": true
                },
                "ignores": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true
                }
              }
            },
            "ClientCommand": {
              "type": "array",
              "default": [
                "path/to/language-server-binary",
                "--some-option"
              ],
              "items": {
                "type": "string"
              },
              "markdownDescription": "The command to start the language server."
            },
            "ClientEnabled": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Whether this configuration is enabled or disabled."
            },
            "ClientAutoCompleteSelector": {
              "type": "string",
              "markdownDescription": "When specified, this [selector](https://www.sublimetext.com/docs/3/selectors.html) is used as the `\"selector\"` key in an entry of the `\"auto_complete_triggers\"` of the view applicable to this configuration. You don't have to necessarily provide this value. Because your language server registers so-called trigger characters in any case. However, this selector allows you to fine-tune the auto-complete behavior if the registered trigger characters of the language server result in an unpleasent auto-complete experience. Note that the behavior of this selector will depend on the .sublime-syntax in use.\n\nThis value is _not_ applied to the **global** `\"auto_complete_selector\"` setting of the view."
            },
            "ClientIgnoreServerTriggerChars": {
              "type": "boolean",
              "default": false,
              "deprecationMessage": "Use disabled_capabilities instead: \"disabled_capabilities\": {\"completionProvider\": {\"triggerCharacters\": true}}"
            },
            "ClientInitializationOptions": {
              "type": "object",
              "markdownDescription": "The initializationOptions that are passed to the language server process during the _initialize_ phase. This is a rather free-form dictionary of key-value pairs and is different per language server. Look up documentation of your specific langauge server to see what the possible key-value pairs can be."
            },
            "ClientSettings": {
              "type": "object",
              "markdownDescription": "The server settings. This is a rather free-form dictionary of key-value pairs and is different per language server. Look up documentation of your specific langauge server to see what the possible key-value pairs can be."
            },
            "ClientExperimentalCapabilities": {
              "type": "object",
              "markdownDescription": "Experimental capabilities that are passed to the language server process during the _initialize_ phase. This is different per language server, so you'll need to look up documentation for your particular language server."
            },
            "DisabledCapability": {
              "oneOf": [
                {
                  "type": "object",
                  "default": {}
                },
                {
                  "type": "boolean",
                  "default": true
                }
              ],
            },
            "ClientDisabledCapabilities": {
              "type": "object",
              "markdownDescription": "A dictionary that \"masks\" (disables) the capabilities registered by this language server. For instance, to disable completions, use `{\"completionProvider\": true}`. To disable hover info, use `{\"hoverProvider\": true}`. Multiple providers can be disabled. To disable a subset of a provider, use a nested dictionary. For intance, to disable only the trigger characters of a language server, but not the completion functionality itself, use `{\"completionProvider\": {\"triggerCharacters\": true}}`.",
              "properties": {
                "callHierarchyProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability",
                },
                "codeActionProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "codeLensProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "colorProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "completionProvider": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "triggerCharacters": {
                          "type": "boolean",
                          "default": true
                        }
                      }
                    },
                    {
                      "type": "boolean",
                      "default": true
                    }
                  ],
                },
                "declarationProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "definitionProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "diagnosticProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "documentFormattingProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "documentHighlightProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "documentLinkProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "documentOnTypeFormattingProvider": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "firstTriggerCharacter": {
                          "type": "boolean",
                          "default": true
                        },
                        "moreTriggerCharacter": {
                          "type": "boolean",
                          "default": true
                        }
                      }
                    },
                    {
                      "type": "boolean",
                      "default": true
                    }
                  ]
                },
                "documentRangeFormattingProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "documentSymbolProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "executeCommandProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "foldingRangeProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "hoverProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "implementationProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "inlayHintProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "inlineValueProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "linkedEditingRangeProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "monikerProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "referencesProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "renameProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "selectionRangeProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "semanticTokensProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "signatureHelpProvider": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "triggerCharacters": {
                          "type": "boolean",
                          "default": true
                        },
                        "retriggerCharacters": {
                          "type": "boolean",
                          "default": true
                        }
                      }
                    },
                    {
                      "type": "boolean",
                      "default": true
                    }
                  ]
                },
                "typeDefinitionProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "typeHierarchyProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                },
                "workspaceSymbolProvider": {
                  "$ref": "sublime://settings/LSP#/definitions/DisabledCapability"
                }
              }
            },
            "ClientEnv": {
              "type": "object",
              "markdownDescription": "Specify environment variables to pass to the language server process on startup.",
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "string",
                    "markdownDescription": "The value for this environment variable."
                  },
                  {
                    "type": "array",
                    "markdownDescription": "A list of values. The list will be joined into a string with your native file system's path separator. For example, `[\"a\", \"b\"]` will turn into `\"a;b\"` on Windows.",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "ClientSelector": {
              // \u00A0 is used as a workaround for https://github.com/sublimehq/sublime_text/issues/3373
              "markdownDescription": "A [selector](https://www.sublimetext.com/docs/3/selectors.html) that defines to which views this language server should be attached, in the same way that a selector for a [Build\u00A0System](https://www.sublimetext.com/docs/3/build_systems.html) is used to filter the Build System to particular views. The selector is matched against the base scope of the syntax of the view. If the selector matches with the base scope of the the file, the associated language server is started. To determine the base scope of your view, click on Tools > Developer > Show Scope Name. The first line in the popup is the base scope.",
              "type": "string",
            },
            "ClientSchemes": {
              "markdownDescription": "An optional list of URI schemes which this client configuration should attach to. A well-known URI scheme is the `file` scheme. The scheme `buffer` is used as in-memory scratch buffer (that is when you create a new unsaved tab). Furthermore, the scheme `res` is used to denote Sublime Text resource files inside .sublime-package files, viewable with the _View Package File_ command from the _Command Palette_.\n\nOther URI schemes exist, but require different considerations for different language servers.\n\nIf this setting is not specified, then only the `file` scheme is used, meaning that this client configuration will only attach to views that are backed by a file on disk.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              },
              "defaultSnippets": [
                {
                  "body": [
                    "${1:file}"
                  ]
                }
              ]
            },
            "ClientDiagnosticsMode": {
              "markdownDescription": "Controls whether diagnostics are ignored for files that are not within the project folders. If the server supports \"pull diagnostics\", this also controls whether diagnostics are requested only for open files, or for all files contained in the project folders.",
              "type": "string",
              "enum": [
                "open_files",
                "workspace"
              ],
              "markdownEnumDescriptions": [
                "Diagnostics are requested only for open files and they are cleared when the file closes.",
                "Diagnostics are requested for all files in the project folders (only for servers with `diagnosticProvider.workspaceDiagnostics` capability). Diagnostics for files not within the project folders are ignored."
              ],
              "default": "open_files"
            },
            "ClientPrioritySelector": {
              "markdownDescription": "While the `\"selector\"` is used to determine which views belong to which language server configuration, the `\"priority_selector\"` is used to determine which language server wins at the caret position in case there are multiple language servers attached to a view. For instance, there can only be one signature help popup visible at any given time. This selector is use to decide which one to use for such capabilities. This setting is optional and you won't need to set it if you're planning on using a single language server for a particular type of view."
            },
            // The ClientConfig class
            "ClientConfig": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "The configuration that informs LSP on how to start your language server and to which views it should attach the language server process",
              "properties": {
                "command": {
                  "$ref": "sublime://settings/LSP#/definitions/ClientCommand"
                },
                "enabled": {
                  "$ref": "sublime://settings/LSP#/definitions/ClientEnabled"
                },
                "file_watcher": {
                  "$ref": "sublime://settings/LSP#/definitions/FileWatcher"
                },
                "tcp_port": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0,
                  "markdownDescription": "When specified, the TCP port to use to connect to the language server process. If not specified, STDIO is used as the transport. When set to zero, a free TCP port is chosen. You can use that free TCP port number as a template variable, i.e. as `${tcp_port}` in the `\"command\"`."
                },
                "auto_complete_selector": {
                  "$ref": "#/definitions/ClientAutoCompleteSelector"
                },
                "ignore_server_trigger_chars": {
                  "$ref": "#/definitions/ClientIgnoreServerTriggerChars"
                },
                "selector": {
                  "$ref": "#/definitions/ClientSelector"
                },
                "schemes": {
                  "$ref": "#/definitions/ClientSchemes"
                },
                "priority_selector": {
                  "$ref": "#/definitions/ClientPrioritySelector",
                },
                "initializationOptions": {
                  "$ref": "#/definitions/ClientInitializationOptions"
                },
                "settings": {
                  "$ref": "#/definitions/ClientSettings"
                },
                "experimental_capabilities": {
                  "$ref": "#/definitions/ClientExperimentalCapabilities"
                },
                "disabled_capabilities": {
                  "$ref": "#/definitions/ClientDisabledCapabilities"
                },
                "env": {
                  "$ref": "#/definitions/ClientEnv"
                },
                "languageId": {
                  "$ref": "#/definitions/useSelectorInstead"
                },
                "document_selector": {
                  "$ref": "#/definitions/useSelectorInstead"
                },
                "feature_selector": {
                  "$ref": "#/definitions/useSelectorInstead"
                },
                "diagnostics_mode": {
                  "$ref": "#/definitions/ClientDiagnosticsMode"
                },
                "syntaxes": {
                  "type": "array",
                  "$ref": "#/definitions/useSelectorInstead"
                },
                "scopes": {
                  "type": "array",
                  "$ref": "#/definitions/useSelectorInstead"
                },
                "languages": {
                  "type": "array",
                  "$ref": "#/definitions/useSelectorInstead"
                }
              }
            }
          }
        }
      },
      {
        "file_patterns": [
          "/LSP.sublime-settings"
        ],
        "schema": {
          "properties": {
            "show_view_status": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Show permanent language server status in the status bar."
            },
            "auto_show_diagnostics_panel": {
              "oneOf": [
                {
                  "enum": [
                    "never",
                    "always",
                    "saved"
                  ]
                },
                {
                  "type": "boolean",
                  "deprecationMessage": "Use an array instead."
                }
              ],
              "default": "saved",
              "deprecationMessage": "Use the \"show_diagnostics_panel_on_save\" setting instead."
            },
            "code_action_on_save_timeout_ms": {
              "type": "integer",
              "default": 2000,
              "deprecationMessage": "Use the \"on_save_task_timeout_ms\" setting instead."
            },
            "on_save_task_timeout_ms": {
              "type": "integer",
              "default": 2000,
              "markdownDescription": "The amount of time the save tasks (like code actions on save, formatting or WillSaveWaitUntil) are each allowed to run for."
            },
            "show_diagnostics_panel_on_save": {
              "type": "integer",
              "minimum": 0,
              "maximum": 4,
              "default": 0,
              "markdownDescription": "Open the diagnostics panel automatically **on save** when diagnostics level is equal to or less than:\n\n- _none_: `0` (this means never show the panel automatically),\n- _error_: `1`,\n- _warning_: `2`,\n- _info_: `3`,\n- _hint_: `4`\n\nThe panel is not shown when there is already another panel open. The panel is never _closed_ automatically. To close the panel, press the <kbd>Esc</kbd> key."
            },
            "show_diagnostics_count_in_view_status": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Show errors and warnings count in the status bar."
            },
            "lsp_format_on_save": {
              "$ref": "sublime://settings/LSP#/definitions/lsp_format_on_save"
            },
            "lsp_code_actions_on_save": {
              "$ref": "sublime://settings/LSP#/definitions/lsp_code_actions_on_save",
            },
            "show_diagnostics_in_view_status": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Show the diagnostics description of the code under the cursor in status bar if available."
            },
            "show_diagnostics_severity_level": {
              "type": "integer",
              "default": 4,
              "minimum": 0,
              "maximum": 4,
              "markdownDescription": "Show highlights and gutter markers in the file views for diagnostics with level equal to or less than:\n\n- _none_: `0`,\n- _error_: `1`,\n- _warning_: `2`,\n- _info_: `3`,\n- _hint_: `4`"
            },
            "show_diagnostics_annotations_severity_level": {
              "default": 0,
              "enum": [
                0,
                1,
                2,
                3,
                4
              ],
              "markdownDescription": "Show diagnostics as annotations with level equal to or less than given value.\n\nWhen enabled, it's recommended not to use the `\"annotation\"` value for the `show_code_actions` option as it's impossible to enforce which one gets shown first.",
              "markdownEnumDescriptions": [
                "never show",
                "error",
                "warning",
                "info",
                "hint"
              ]
            },
            "diagnostics_panel_include_severity_level": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4,
              "default": 4,
              "markdownDescription": "Only show diagnostics in the panel with level equal to or less than:\n\n- _error_: `1`,\n- _warning_: `2`,\n- _info_: `3`,\n- _hint_: `4`"
            },
            "diagnostics_delay_ms": {
              "type": "integer",
              "default": 0,
              "minimum": 0,
              "markdownDescription": "Delay showing diagnostics by this many milliseconds. The delay will only kick into action when previously there were no diagnostics in the view. If there were previous diagnostics in the view, then the delay setting here is ignored and diagnostics are updated immediately."
            },
            "diagnostics_additional_delay_auto_complete_ms": {
              "type": "integer",
              "default": 0,
              "minimum": 0,
              "markdownDescription": "Add an additional delay when the auto-complete widget is currently visible. Just like `\"diagnostics_delay_ms\"`, the unit is milliseconds. The total amount of delay would be `diagnostics_delay_ms + diagnostics_additional_delay_auto_complete_ms`."
            },
            "diagnostics_highlight_style": {
              "oneOf": [
                {
                  "enum": ["box", "underline", "stippled", "squiggly", ""],
                },
                {
                  "type": "object",
                  "properties": {
                    "error": {
                      "enum": ["box", "underline", "stippled", "squiggly", ""],
                      "default": "squiggly"
                    },
                    "warning": {
                      "enum": ["box", "underline", "stippled", "squiggly", ""],
                      "default": "squiggly"
                    },
                    "info": {
                      "enum": ["box", "underline", "stippled", "squiggly", ""],
                      "default": "stippled"
                    },
                    "hint": {
                      "enum": ["box", "underline", "stippled", "squiggly", ""],
                      "default": "stippled"
                    },
                  },
                  "additionalProperties": false
                }
              ],
              "default": {
                "error": "squiggly",
                "warning": "squiggly",
                "info": "stippled",
                "hint": "stippled"
              },
              "markdownDescription": "Highlight style of code diagnostics.\nCan be a string, or a mapping of string->string for severity-based styling.\nValid string values are `\"box\"`, `\"underline\"`, `\"stippled\"`, `\"squiggly\"` or the empty string (`\"\"`).\nWhen set to a valid string value, all severities will use that style.\nWhen set to the empty string (`\"\"`), no diagnostics are drawn.\nWhen disabled, gutter markers are still drawn, unless `\"diagnostics_gutter_marker\"` is set to `\"\"`.\nDiagnostics which span multiple lines are always drawn with the `box` style (See `\"show_multiline_diagnostics_highlights\"`)."
            },
            "document_highlight_style": {
              "enum": [
                "background",
                "underline",
                "stippled",
                "outline",
                ""
              ],
              "default": "underline",
              "markdownDescription": "Highlighting style of `\"highlights\"`: accentuating nearby text entities that are related to the one under your cursor.\n\nSee https://lsp.sublimetext.io/customization/#document-highlights for how to customize the color."
            },
            "show_multiline_document_highlights": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Show document highlights spanning multiple lines in the view (as outlines)."
            },
            "hover_highlight_style": {
              "enum": [
                "background",
                "underline",
                "stippled",
                "outline",
                ""
              ],
              "default": "",
              "markdownDescription": "Highlight style of the word or range for which a hover popup is shown.\n\nSee https://lsp.sublimetext.io/customization/#hover-highlights for how to customize the color."
            },
            "diagnostics_gutter_marker": {
              "enum": [
                "dot",
                "circle",
                "bookmark",
                "sign",
                ""
              ],
              "default": "sign",
              "markdownDescription": "Gutter marker for code diagnostics."
            },
            "link_highlight_style": {
              "enum": [
                "underline",
                "none",
                "disabled"
              ],
              "default": "underline",
              "markdownDescription": "Highlight style of links to internal or external resources, like another text document or a web site."
            },
            "semantic_highlighting": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Enable semantic highlighting in addition to standard syntax highlighting."
            },
            "show_code_actions": {
              "enum": [
                "annotation",
                "bulb",
                ""
              ],
              "enumDescriptions": [
                "Show code actions to right as a clickable bluish annotation.",
                "Show code actions in the gutter as a light bulb.",
                "Do not show code actions."
              ],
              "default": "annotation",
              "markdownDescription": "Where to show `\"code actions\"`. Due to API limitations, the `\"bulb\"` icon can not be clicked so the code actions can only be triggered using a keyboard shortcut or the context menu."
            },
            "show_code_lens": {
              "enum": [
                "annotation",
                "phantom"
              ],
              "enumDescriptions": [
                "Show code lens to right as a clickable greenish annotation.",
                "Show code lens as a phantom."
              ],
              "default": "annotation",
              "markdownDescription": "Where to show `\"code lens\"`."
            },
            "show_code_actions_in_hover": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Show code actions in hover popup if available."
            },
            "show_diagnostics_highlights": {
              "type": "boolean",
              "deprecationMessage": "Use \"diagnostics_highlight_style\" instead",
            },
            "show_multiline_diagnostics_highlights": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Show diagnostics spanning multiline diagnostics (as outlines) in the view. See also: `\"diagnostics_highlight_style\"`."
            },
            "show_symbol_action_links": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Show symbol action links in hover popup if available."
            },
            "only_show_lsp_completions": {
              "type": "boolean",
              "default": false,
              "deprecationMessage": "This setting is deprecated. Use a combination of \"inhibit_snippet_completions\" and \"inhibit_word_completions\" instead."
            },
            "inhibit_snippet_completions": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Disable Sublime Text's (and your own) snippet completions. Note that your language server may still provide completion items of the \"snippet\" kind."
            },
            "inhibit_word_completions": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Disable Sublime Text's word completions. \"word\" completion means Sublime Text's internal completer that takes words from the current buffer you're editing and presents them in the auto-complete widget."
            },
            "completion_insert_mode": {
              "type": "string",
              "default": "insert",
              "enum": ["insert", "replace"],
              "markdownDescription": "The mode used for inserting completions:\n\n - `insert` would insert the completion text in a middle of the word\n\n - `replace` would replace the existing word with a new completion text\n\n An LSP keybinding `lsp_commit_completion_with_opposite_insert_mode`\n can be used to insert completion using the opposite mode to the one selected here.\n\n Note: Must be supported by the language server."
            },
            "show_references_in_quick_panel": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Show symbol references in Sublime's quick panel instead of the bottom panel."
            },
            "popup_max_characters_width": {
              "type": "integer",
              "default": 120,
              "minimum": 1,
              "description": "The maximum number of characters (approximately) before wrapping in the popup."
            },
            "popup_max_characters_height": {
              "type": "integer",
              "default": 1000,
              "minimum": 1,
              "description": "The maximum number of characters (approximately) before a scrollbar appears."
            },
            "disabled_capabilities": {
              "type": "array",
              "uniqueItems": true,
              "minItems": 0,
              "deprecationMessage": "Instead of a global option, this option is now on a per-client basis. Moreover, this is now an object instead of an array."
            },
            "log_debug": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Show verbose debug messages in the sublime console."
            },
            "log_server": {
              "oneOf": [
                {
                  "type": "array",
                  "default": ["panel"],
                  "items": {
                    "type": "string",
                    "enum": [
                      "panel",
                      "remote",
                    ]
                  },
                  "uniqueItems": true,
                  "minItems": 0
                },
                {
                  "type": "boolean",
                  "deprecationMessage": "Use an array instead."
                }
              ],
              "markdownDescription": "Log communication from and to language servers. Possible flags:\n\n- `\"panel\"`: log to the LSP Log Panel\n- `\"remote\"`: start a local websocket server on port 9981. Can be connected to with a websocket client to receive the log messages in real time.\n\nFor backward-compatibility, when set to `true`, enables the `\"panel\"` logger and when set to `false` disables logging. This output panel can be toggled from the command palette with the command **LSP: Toggle Log Panel**."
            },
            "log_max_size": {
              "type": "integer",
              "default": 8192,
              "minimum": 0,
              "markdownDescription": "When logging to the `\"panel\"` (see `\"log_server\"`), if the params of the request or response or notification exceed this many characters, then print a `<snip>` to the panel instead. If you don't want a limit, set this to zero."
            },
            "clients": {
              "additionalProperties": {
                "$ref": "sublime://settings/LSP#/definitions/ClientConfig"
              },
              "markdownDescription": "The dictionary of your configured language servers. The keys of this dictionary are free-form. They give a humany-friendly name to the server configuration. They are shown in the bottom-left corner in the status bar once attached to a view (unless you have `\"show_view_status\"` set to `false`)."
            },
            "default_clients": {
              "additionalProperties": {
                "$ref": "sublime://settings/LSP#/definitions/ClientConfig"
              },
              "markdownDescription": "**DO NOT MODIFY THIS SETTING!** Use `\"clients\"` to override settings instead!",
            },
            "show_inlay_hints": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Show inlay hints in the editor. Inlay hints are short annotations within the code, which show variable types or parameter names.\nThis is the default value used for new windows but can be overriden per-window using the `LSP: Toggle Inlay Hints` command from the Command Palette, Main Menu or a custom keybinding."
            },
            "initially_folded": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "comment",
                      "imports",
                      "region"
                    ],
                    "markdownEnumDescriptions": [
                      "Comment blocks",
                      "Imports or includes",
                      "Regions (e.g. `#region`)"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "uniqueItems": true,
              "markdownDescription": "Determines ranges which initially should be folded when a document is opened, provided that the language server has support for this."
            }
          },
          "additionalProperties": false
        }
      },
      {
        "file_patterns": [
          "/Preferences.sublime-settings"
        ],
        "schema": {
          "properties": {
            "lsp_format_on_save": {
              "$ref": "sublime://settings/LSP#/definitions/lsp_format_on_save",
            },
            "lsp_code_actions_on_save": {
              "$ref": "sublime://settings/LSP#/definitions/lsp_code_actions_on_save"
            }
          }
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "type": "object",
                  "markdownDescription": "The dictionary of your configured language servers or overrides for existing configurations. The keys of this dictionary are free-form. They give a humany-friendly name to the server configuration. They are shown in the bottom-left corner in the status bar once attached to a view (unless you have `\"show_view_status\"` set to `false`).",
                  "properties": {
                    "formatters": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": {
                    "$ref": "sublime://settings/LSP#/definitions/ClientConfig"
                  }
                }
              }
            }
          }
        }
      },
      {
        "schema": {
          "$id": "sublime://settings/LSP-plugin-base",
          "properties": {
            "command": {
              "$ref": "sublime://settings/LSP#/definitions/ClientCommand"
            },
            "enabled": {
              "$ref": "sublime://settings/LSP#/definitions/ClientEnabled"
            },
            "file_watcher": {
              "$ref": "sublime://settings/LSP#/definitions/FileWatcher"
            },
            "selector": {
              "$ref": "sublime://settings/LSP#/definitions/ClientSelector"
            },
            "schemes": {
              "$ref": "sublime://settings/LSP#/definitions/ClientSchemes"
            },
            "diagnostics_mode": {
              "$ref": "sublime://settings/LSP#/definitions/ClientDiagnosticsMode"
            },
            "priority_selector": {
              "$ref": "sublime://settings/LSP#/definitions/ClientPrioritySelector"
            },
            "initializationOptions": {
              "$ref": "sublime://settings/LSP#/definitions/ClientInitializationOptions"
            },
            "settings": {
              "$ref": "sublime://settings/LSP#/definitions/ClientSettings"
            },
            "experimental_capabilities": {
              "$ref": "sublime://settings/LSP#/definitions/ClientExperimentalCapabilities"
            },
            "disabled_capabilities": {
              "$ref": "sublime://settings/LSP#/definitions/ClientDisabledCapabilities"
            },
            "env": {
              "$ref": "sublime://settings/LSP#/definitions/ClientEnv"
            },
            "auto_complete_selector": {
              "$ref": "sublime://settings/LSP#/definitions/ClientAutoCompleteSelector"
            },
            "ignore_server_trigger_chars": {
              "$ref": "sublime://settings/LSP#/definitions/ClientIgnoreServerTriggerChars"
            }
          }
        }
      }
    ]
  }
}
